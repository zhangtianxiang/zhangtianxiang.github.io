<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[[置顶]题解还债计划]]></title>
      <url>http://zhangtianxiang.github.io/3333/03/02/%5B%E7%BD%AE%E9%A1%B6%5D%E9%A2%98%E8%A7%A3%E8%BF%98%E5%80%BA%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>　　dr神犇每天都在努力地写题解,我也要努力啦…做一道题写一道…尽量不拖欠<br>　　<del>以前做过的就不管啦</del><br>　　<img src="http://ww4.sinaimg.cn/large/eb060c3ejw1eqegm35hnkj20k00cignh.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[置顶]蒟蒻成长计划のbzoj 200+]]></title>
      <url>http://zhangtianxiang.github.io/3333/02/01/%5B%E7%BD%AE%E9%A1%B6%5D%E8%92%9F%E8%92%BB%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92%E3%81%AEbzoj200+/</url>
      <content type="html"><![CDATA[<p>我太弱了,现在在bzoj上只能找些水题刷一刷<br>现在水题少了,刷题也变慢了QAQ….<br>时隔这么长时间才200A<br>前几天Github挂掉了没办法写题解<del>我会说是我懒么</del><br>看来还需要更加勤奋啊<br><img src="http://i2.tietuku.com/0fe227b227aec14a.png" alt="任务完成"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[工具] slk文件（QQ or 微信） 转为 mp3]]></title>
      <url>http://zhangtianxiang.github.io/2016/07/02/slktomp3/</url>
      <content type="html"><![CDATA[<p>最近由于jsx同学没有认真百度，找不到slk-&gt;mp3工具<br>网上的百度经验或者百度知道什么分享的方法试过了，只能坚持3秒钟，太不持久<br>在我多年百度一下经验指导下，发现了一个好用的工具，直接发<a href="https://kn007.net/topics/batch-convert-silk-v3-audio-files-to-mp3-in-windows/" target="_blank" rel="external">作者文章链接</a>，里面有使用方法和<a href="http://dl.kn007.net/directlink/silk2mp3.zip" target="_blank" rel="external">下载链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[cogs] 1583. [POJ3237]树的维护]]></title>
      <url>http://zhangtianxiang.github.io/2015/04/06/cogs1583/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>点修改,链上边权取反;<br>询问链上边权最大值.</p>
<a id="more"></a>
<h2 id="分析">分析</h2><p>我们把边权存在点上,在建立边与点的对应关系,就可以进行点修改了.<br>那么我们要修改和查询关于链上的边权又要怎么办呢?<br>我们注意到如果进行换根操作就不能进行关于链上边权的操作了(这个画画图就能看出来)<br>所以我们需要一种不用换根的方法.</p>
<p>对于一条链$(u,v)$,首先,$Access(v)$,就会出现下图:<br><img src="http://i2.tietuku.com/83160d0596ee2ce0.png" alt=""><br>其中$v$与$Root$在同一棵辅助树中<br>再$Access(u)$,直到这种情况:<br><img src="http://i2.tietuku.com/72229deeb68c2345.png" alt=""><br>那么我们的链的边权实际上存在$b$所在的子树,$right(c)$所在的子树中.</p>
<h2 id="代码">代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************\</span><br><span class="line">* Author : ztx</span><br><span class="line">* Title  : [cogs] 1583. [POJ3237]树的维护</span><br><span class="line">* ALG    : LCT复习</span><br><span class="line">* CMT    :</span><br><span class="line">链上边权最大值</span><br><span class="line">* Time   :</span><br><span class="line">\****************************************/</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">include</span> &lt;cstdio&gt;</span><br><span class="line">#define Rep(i,<span class="keyword">l</span>,r) <span class="keyword">for</span>(i=(<span class="keyword">l</span>);i&lt;=(r);i++)</span><br><span class="line">#define Rev(i,r,<span class="keyword">l</span>) <span class="keyword">for</span>(i=(r);i&gt;=(<span class="keyword">l</span>);i--)</span><br><span class="line">typedef long long ll ;</span><br><span class="line">int CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;inline void <span class="keyword">read</span>(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">    <span class="keyword">ret</span> = NEG = 0 ; <span class="keyword">while</span> (CH=getchar() , CH&lt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (CH == '-') NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">ret</span> = <span class="keyword">ret</span>*10+CH-'0' , CH=getchar() , CH&gt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) <span class="keyword">ret</span> = -<span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;inline void reads(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=getchar() , <span class="keyword">ret</span>&lt;'!') ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;'!') ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxn  10010LL</span><br><span class="line"></span><br><span class="line">int fa[maxn] , ch[maxn][2] ;</span><br><span class="line">int val[maxn] , maxv[maxn] , minv[maxn] ;</span><br><span class="line">bool rev[maxn] ;</span><br><span class="line"></span><br><span class="line">#define  null     0LL</span><br><span class="line">#define  left(<span class="keyword">u</span>)  ch[<span class="keyword">u</span>][0]</span><br><span class="line">#define  right(<span class="keyword">u</span>) ch[<span class="keyword">u</span>][1]</span><br><span class="line">#define  <span class="literal">max</span>(x,y) ((x)&gt;(y)?(x):(y))</span><br><span class="line">#define  <span class="literal">min</span>(x,y) ((x)&lt;(y)?(x):(y))</span><br><span class="line">#define  <span class="keyword">infi</span>     0x7f7f7f7fLL</span><br><span class="line"></span><br><span class="line">inline void Exchange(int&amp;a,int&amp;b) &#123;int c=a;a=b;b=c;&#125;</span><br><span class="line">inline bool Isrt(int <span class="keyword">u</span>) &#123; <span class="keyword">return</span> !fa[<span class="keyword">u</span>]||(left(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span>&amp;&amp;right(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span>) ; &#125;</span><br><span class="line">inline void <span class="literal">Reverse</span>(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">truerev[<span class="keyword">u</span>]^=true , val[<span class="keyword">u</span>]=-val[<span class="keyword">u</span>] ;</span><br><span class="line">trueExchange(maxv[<span class="keyword">u</span>],minv[<span class="keyword">u</span>]) , maxv[<span class="keyword">u</span>]=-maxv[<span class="keyword">u</span>] , minv[<span class="keyword">u</span>]=-minv[<span class="keyword">u</span>] ;</span><br><span class="line">&#125;</span><br><span class="line">inline void <span class="keyword">Clear</span>(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span> || !rev[<span class="keyword">u</span>]) <span class="keyword">return</span> ;</span><br><span class="line">truerev[<span class="keyword">u</span>] = false , <span class="literal">Reverse</span>(left(<span class="keyword">u</span>)) , <span class="literal">Reverse</span>(right(<span class="keyword">u</span>)) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Maintain(int <span class="keyword">u</span>) &#123;</span><br><span class="line">truemaxv[<span class="keyword">u</span>] = minv[<span class="keyword">u</span>] = val[<span class="keyword">u</span>] ;</span><br><span class="line">true<span class="keyword">if</span> (left(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetruemaxv[<span class="keyword">u</span>] = <span class="literal">max</span>(maxv[<span class="keyword">u</span>],maxv[left(<span class="keyword">u</span>)]) ;</span><br><span class="line">truetrueminv[<span class="keyword">u</span>] = <span class="literal">min</span>(minv[<span class="keyword">u</span>],minv[left(<span class="keyword">u</span>)]) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (right(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetruemaxv[<span class="keyword">u</span>] = <span class="literal">max</span>(maxv[<span class="keyword">u</span>],maxv[right(<span class="keyword">u</span>)]) ;</span><br><span class="line">truetrueminv[<span class="keyword">u</span>] = <span class="literal">min</span>(minv[<span class="keyword">u</span>],minv[right(<span class="keyword">u</span>)]) ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void <span class="keyword">Rot</span>(int x , int <span class="keyword">d</span>) &#123;</span><br><span class="line">trueint y=fa[x] , z=fa[y] ;</span><br><span class="line">true<span class="keyword">if</span> (left(z)==y) left(z)=x;</span><br><span class="line">true<span class="keyword">else</span> <span class="keyword">if</span> (right(z)==y) right(z)=x;</span><br><span class="line">truefa[x]=z,fa[y]=x,fa[ch[x][<span class="keyword">d</span>]]=y;</span><br><span class="line">truech[y][!<span class="keyword">d</span>]=ch[x][<span class="keyword">d</span>],ch[x][<span class="keyword">d</span>]=y;</span><br><span class="line">trueMaintain(y) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Splay(int x) &#123;</span><br><span class="line">int y , z ;</span><br><span class="line">true<span class="keyword">Clear</span>(x) ;</span><br><span class="line">true<span class="keyword">while</span> (!Isrt(x)) &#123;</span><br><span class="line">truetruey=fa[x] , z=fa[y] ;</span><br><span class="line">truetrue<span class="keyword">Clear</span>(z) , <span class="keyword">Clear</span>(y) , <span class="keyword">Clear</span>(x) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (Isrt(y)) <span class="keyword">Rot</span>(x,left(y)==x) ;</span><br><span class="line">truetrue<span class="keyword">else</span> <span class="keyword">if</span> (left(z)==y) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (left(y)==x) <span class="keyword">Rot</span>(y,1) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,0) ; <span class="keyword">Rot</span>(x,1) ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (right(y)==x) <span class="keyword">Rot</span>(y,0) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,1) ; <span class="keyword">Rot</span>(x,0) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueMaintain(x) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Access(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int v=null;<span class="keyword">u</span>;v=<span class="keyword">u</span>,<span class="keyword">u</span>=fa[<span class="keyword">u</span>]) Splay(<span class="keyword">u</span>),right(<span class="keyword">u</span>)=v,Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void NodeChange(int <span class="keyword">u</span> , int w) &#123;</span><br><span class="line">trueSplay(<span class="keyword">u</span>) , val[<span class="keyword">u</span>] = w ; Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainRev(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">true<span class="keyword">for</span> (Access(v),v=null;<span class="keyword">u</span>;v=<span class="keyword">u</span>,<span class="keyword">u</span>=fa[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetrueSplay(<span class="keyword">u</span>) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (!fa[<span class="keyword">u</span>])</span><br><span class="line">truetruetrue<span class="literal">Reverse</span>(v) , <span class="literal">Reverse</span>(right(<span class="keyword">u</span>)) ;</span><br><span class="line">truetrueright(<span class="keyword">u</span>)=v , Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainMax(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">true<span class="keyword">for</span> (Access(v),v=null;<span class="keyword">u</span>;v=<span class="keyword">u</span>,<span class="keyword">u</span>=fa[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetrueSplay(<span class="keyword">u</span>) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (!fa[<span class="keyword">u</span>])</span><br><span class="line">truetruetrueprintf(<span class="string">"%d\n"</span>, <span class="literal">max</span>(maxv[v],maxv[right(<span class="keyword">u</span>)])) ;</span><br><span class="line">truetrueright(<span class="keyword">u</span>)=v , Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxm  10010LL</span><br><span class="line">int belong[maxm] = &#123;0&#125; ;</span><br><span class="line">struct FST &#123; int to , next , len ; &#125; <span class="keyword">e</span>[maxm&lt;&lt;1] ;</span><br><span class="line">int star[maxn] = &#123;0&#125; , tote = 1 ;</span><br><span class="line">inline void AddEdge(int <span class="keyword">u</span> , int v , int w) &#123; <span class="keyword">e</span>[++tote].to = v ; <span class="keyword">e</span>[tote].len = w ; <span class="keyword">e</span>[tote].next = star[<span class="keyword">u</span>] ; star[<span class="keyword">u</span>] = tote ; &#125;</span><br><span class="line">inline void GetPar(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int p=star[<span class="keyword">u</span>] ; p ; p=<span class="keyword">e</span>[p].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="keyword">e</span>[p].to != fa[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetruetruebelong[p&gt;&gt;1] = <span class="keyword">e</span>[p].to ;</span><br><span class="line">truetruetruemaxv[<span class="keyword">e</span>[p].to] = minv[<span class="keyword">e</span>[p].to] = val[<span class="keyword">e</span>[p].to] = <span class="keyword">e</span>[p].len ;</span><br><span class="line">truetruetruefa[<span class="keyword">e</span>[p].to] = <span class="keyword">u</span> ;</span><br><span class="line">truetruetrueGetPar(<span class="keyword">e</span>[p].to) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int <span class="keyword">n</span> , <span class="keyword">m</span> , i , <span class="keyword">u</span> , v , w , cmd ;</span><br><span class="line">true#define <span class="keyword">READ</span></span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefreopen(<span class="string">"maintaintree.in" ,"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"maintaintree.out","w"</span>,stdout) ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">read</span>(<span class="keyword">n</span>) ;</span><br><span class="line">trueRep (i,2,<span class="keyword">n</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) , <span class="keyword">read</span>(w) ;</span><br><span class="line">truetrueAddEdge(<span class="keyword">u</span>,v,w) ;</span><br><span class="line">truetrueAddEdge(v,<span class="keyword">u</span>,w) ;</span><br><span class="line">true&#125;</span><br><span class="line">truemaxv[null] = -<span class="keyword">infi</span> ;</span><br><span class="line">trueminv[null] = <span class="keyword">infi</span> ;</span><br><span class="line">true<span class="comment">/*   QAQ我特么又犯了一遍这个错   */</span></span><br><span class="line">trueGetPar(1) ;</span><br><span class="line">true<span class="keyword">while</span> (true) &#123;</span><br><span class="line">truetruereads(cmd) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '<span class="keyword">D</span>') <span class="keyword">break</span> ;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == 'C') NodeChange(belong[<span class="keyword">u</span>],v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == 'Q') ChainMax(<span class="keyword">u</span>,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '<span class="keyword">N</span>') ChainRev(<span class="keyword">u</span>,v) ;</span><br><span class="line">true&#125;</span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true#<span class="keyword">else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">return</span> 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1036: [ZJOI2008]树的统计Count]]></title>
      <url>http://zhangtianxiang.github.io/2015/04/06/bzoj1036/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>单点修改,链查询max,sum</p>
<a id="more"></a>
<h2 id="分析">分析</h2><p>裸体不说了</p>
<h2 id="代码">代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************\</span><br><span class="line">* Author : ztx</span><br><span class="line">* Title  : [bzoj] 1036: [ZJOI2008]树的统计Count</span><br><span class="line">* ALG    : LCT复习  平衡树写的spaly</span><br><span class="line">* CMT    :</span><br><span class="line">单点修改,链查询max,sum</span><br><span class="line">* Time   :</span><br><span class="line">\****************************************/</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">include</span> &lt;cstdio&gt;</span><br><span class="line">#define Rep(i,<span class="keyword">l</span>,r) <span class="keyword">for</span>(i=(<span class="keyword">l</span>);i&lt;=(r);i++)</span><br><span class="line">#define Rev(i,r,<span class="keyword">l</span>) <span class="keyword">for</span>(i=(r);i&gt;=(<span class="keyword">l</span>);i--)</span><br><span class="line">typedef long long ll ;</span><br><span class="line">int CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;inline void <span class="keyword">read</span>(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">    <span class="keyword">ret</span> = NEG = 0 ; <span class="keyword">while</span> (CH=getchar() , CH&lt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (CH == '-') NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">ret</span> = <span class="keyword">ret</span>*10+CH-'0' , CH=getchar() , CH&gt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) <span class="keyword">ret</span> = -<span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;inline void reads(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=getchar() , <span class="keyword">ret</span>&lt;'!') ;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=CH,CH=getchar() , CH&gt;'!') ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxn  30010LL</span><br><span class="line"></span><br><span class="line">int fa[maxn] = &#123;0&#125; , ch[maxn][2] = &#123;0&#125; ;</span><br><span class="line">int val[maxn] = &#123;0&#125; , maxv[maxn] = &#123;0&#125; , sumv[maxn] = &#123;0&#125; ;</span><br><span class="line">bool rev[maxn] = &#123;0&#125; ;</span><br><span class="line"></span><br><span class="line">#define  null     0LL</span><br><span class="line">#define  left(<span class="keyword">u</span>)  ch[<span class="keyword">u</span>][0]</span><br><span class="line">#define  right(<span class="keyword">u</span>) ch[<span class="keyword">u</span>][1]</span><br><span class="line"></span><br><span class="line">inline void Exchange(int&amp;a,int&amp;b) &#123;int c=a;a=b;b=c;&#125;</span><br><span class="line">inline bool Isrt(int <span class="keyword">u</span>) &#123; <span class="keyword">return</span> !fa[<span class="keyword">u</span>] || (left(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span>&amp;&amp;right(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span>) ; &#125;</span><br><span class="line">inline void <span class="keyword">Clear</span>(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">true<span class="keyword">if</span> (rev[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetruerev[<span class="keyword">u</span>] = false ;</span><br><span class="line">truetrueExchange(left(<span class="keyword">u</span>),right(<span class="keyword">u</span>)) ;</span><br><span class="line">truetruerev[left(<span class="keyword">u</span>)] ^= true ;</span><br><span class="line">truetruerev[right(<span class="keyword">u</span>)] ^= true ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void Maintain(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">truesumv[<span class="keyword">u</span>] = maxv[<span class="keyword">u</span>] = val[<span class="keyword">u</span>] ;</span><br><span class="line">true<span class="keyword">if</span> (left(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetruesumv[<span class="keyword">u</span>] += sumv[left(<span class="keyword">u</span>)] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (maxv[left(<span class="keyword">u</span>)] &gt; maxv[<span class="keyword">u</span>]) maxv[<span class="keyword">u</span>] = maxv[left(<span class="keyword">u</span>)] ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (right(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetruesumv[<span class="keyword">u</span>] += sumv[right(<span class="keyword">u</span>)] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (maxv[right(<span class="keyword">u</span>)] &gt; maxv[<span class="keyword">u</span>]) maxv[<span class="keyword">u</span>] = maxv[right(<span class="keyword">u</span>)] ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void <span class="keyword">Rot</span>(int x , int <span class="keyword">d</span>) &#123;</span><br><span class="line">trueint y = fa[x] , z = fa[y] ;</span><br><span class="line">true<span class="keyword">if</span> (left(z)==y) left(z) = x ;</span><br><span class="line">true<span class="keyword">else</span> <span class="keyword">if</span> (right(z)==y) right(z) = x ;</span><br><span class="line">truefa[x] = z , fa[ch[x][<span class="keyword">d</span>]] = y , ch[y][!<span class="keyword">d</span>] = ch[x][<span class="keyword">d</span>] ;</span><br><span class="line">truech[x][<span class="keyword">d</span>] = y , fa[y] = x ;</span><br><span class="line">trueMaintain(y) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">inline void Spaly(int x) &#123;</span><br><span class="line">trueClear(x) ;</span><br><span class="line">truewhile (!Isrt(x))</span><br><span class="line">truetrueClear(fa[x]),Clear(x),Rot(x,ch[fa[x]][0]==x) ;</span><br><span class="line">trueMaintain(x) ;</span><br><span class="line">&#125;</span><br><span class="line">//有人说上面单旋应该叫做Spaly,下面是双旋,是真的Splay</span><br><span class="line">*/</span></span><br><span class="line">inline void Spaly(int x)&#123;</span><br><span class="line">trueint y , z ;</span><br><span class="line">true<span class="keyword">Clear</span>(x) ;</span><br><span class="line">true<span class="keyword">while</span> (!Isrt(x)) &#123;</span><br><span class="line">truetruey = fa[x] , z = fa[y] ;</span><br><span class="line">truetrue<span class="keyword">Clear</span>(z) , <span class="keyword">Clear</span>(y) , <span class="keyword">Clear</span>(x) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (Isrt(y)) <span class="keyword">Rot</span>(x,ch[y][0]==x) ;</span><br><span class="line">truetrue<span class="keyword">else</span> <span class="keyword">if</span>(ch[z][0] == y) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (ch[y][0] == x) <span class="keyword">Rot</span>(y,1) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,0) ; <span class="keyword">Rot</span>(x,1) ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span>(ch[y][1] == x) <span class="keyword">Rot</span>(y,0) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,1) ; <span class="keyword">Rot</span>(x,0) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueMaintain(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void Access(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int v=null ; <span class="keyword">u</span> ; v=<span class="keyword">u</span>,<span class="keyword">u</span>=fa[<span class="keyword">u</span>]) Spaly(<span class="keyword">u</span>), right(<span class="keyword">u</span>)=v, Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void MakeRoot(int <span class="keyword">u</span>) &#123;</span><br><span class="line">trueAccess(<span class="keyword">u</span>) , Spaly(<span class="keyword">u</span>) , rev[<span class="keyword">u</span>] ^= true ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainMax(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueMakeRoot(<span class="keyword">u</span>) , Access(v) , Spaly(v) ;</span><br><span class="line">trueprintf(<span class="string">"%d\n"</span>, maxv[v]) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainSum(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueMakeRoot(<span class="keyword">u</span>) , Access(v) , Spaly(v) ;</span><br><span class="line">trueprintf(<span class="string">"%d\n"</span>, sumv[v]) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void NodeChange(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueSpaly(<span class="keyword">u</span>) ; val[<span class="keyword">u</span>] = v ; Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxm  30010LL</span><br><span class="line"></span><br><span class="line">struct FST &#123; int to , next ; &#125; <span class="keyword">e</span>[maxm&lt;&lt;1] ;</span><br><span class="line">int star[maxn] = &#123;0&#125; , tote = 1 ;</span><br><span class="line">inline void AddEdge(int <span class="keyword">u</span> , int v) &#123; <span class="keyword">e</span>[++tote].to = v ; <span class="keyword">e</span>[tote].next = star[<span class="keyword">u</span>] ; star[<span class="keyword">u</span>] = tote ; &#125;</span><br><span class="line">inline void GetPar(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int p=star[<span class="keyword">u</span>] ; p ; p=<span class="keyword">e</span>[p].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="keyword">e</span>[p].to != fa[<span class="keyword">u</span>])</span><br><span class="line">truetruetruefa[<span class="keyword">e</span>[p].to] = <span class="keyword">u</span> , GetPar(<span class="keyword">e</span>[p].to) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int <span class="keyword">n</span> , <span class="keyword">m</span> , i , <span class="keyword">u</span> , v , cmd ;</span><br><span class="line">true#define <span class="keyword">READ</span></span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1036.in" ,"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1036.out","w"</span>,stdout) ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">read</span>(<span class="keyword">n</span>) ;</span><br><span class="line">trueRep (i,2,<span class="keyword">n</span>)</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) ,</span><br><span class="line">truetrueAddEdge(<span class="keyword">u</span>,v) , AddEdge(v,<span class="keyword">u</span>) ;</span><br><span class="line">trueRep (i,1,<span class="keyword">n</span>)</span><br><span class="line">truetrue<span class="keyword">read</span>(val[i]) , maxv[i] = sumv[i] = val[i] ;</span><br><span class="line">trueGetPar(1) ;</span><br><span class="line">true<span class="keyword">read</span>(<span class="keyword">m</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">m</span> --&gt; 0) &#123;</span><br><span class="line">truetruereads(cmd) , <span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '<span class="keyword">E</span>') NodeChange(<span class="keyword">u</span>,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == 'X') ChainMax(<span class="keyword">u</span>,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '<span class="keyword">M</span>') ChainSum(<span class="keyword">u</span>,v) ;</span><br><span class="line">true&#125;</span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true#<span class="keyword">else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">return</span> 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[cogs] 1799. [国家集训队2012]tree(伍一鸣)]]></title>
      <url>http://zhangtianxiang.github.io/2015/04/06/cogs1799/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>链加,链乘;<br>删边,添边;<br>询问链和;</p>
<a id="more"></a>
<h2 id="分析">分析</h2><p>对于链加与链乘,显然需要打lazy标记才可,那我们需要思考怎么样同时打这两个标记.<br>设两标记原为$add$与$mul$,该点当前权值为$val$,实际权值为$QAQ$<br>即我们需要考虑一个新的标记$mul$作用于$add$和$val$上,还是$add$作用于$mul$和$val$上.<br>学过小学数学的我们知道<br>$$a = (b+c)<em>d = b</em>d+c*d$$<br>显然我们可以按照这种方法使乘法作用在加法上.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************\</span><br><span class="line">* Author : ztx</span><br><span class="line">* Title  : [cogs] 1799. [国家集训队2012]tree(伍一鸣)</span><br><span class="line">* ALG    : LCT 复习</span><br><span class="line">* CMT    :</span><br><span class="line">链加,链乘;</span><br><span class="line">删边,添边;</span><br><span class="line">询问链和;</span><br><span class="line">* Time   :</span><br><span class="line">\****************************************/</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">include</span> &lt;cstdio&gt;</span><br><span class="line">#define Rep(i,<span class="keyword">l</span>,r) <span class="keyword">for</span>(i=(<span class="keyword">l</span>);i&lt;=(r);i++)</span><br><span class="line">#define Rev(i,r,<span class="keyword">l</span>) <span class="keyword">for</span>(i=(r);i&gt;=(<span class="keyword">l</span>);i--)</span><br><span class="line">typedef long long ll ;</span><br><span class="line">typedef unsigned uint ;</span><br><span class="line">int CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;inline void <span class="keyword">read</span>(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">    <span class="keyword">ret</span> = NEG = 0 ; <span class="keyword">while</span> (CH=getchar() , CH&lt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (CH == '-') NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">ret</span> = <span class="keyword">ret</span>*10+CH-'0' , CH=getchar() , CH&gt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) <span class="keyword">ret</span> = -<span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;inline void reads(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=getchar() , <span class="keyword">ret</span>&lt;'!') ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;'!') ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxn   100010LL</span><br><span class="line">#define  ansmod 51061ULL</span><br><span class="line"></span><br><span class="line">int ch[maxn][2] , fa[maxn] ;</span><br><span class="line">uint sz[maxn] , <span class="keyword">sum</span>[maxn] , val[maxn] ;</span><br><span class="line">uint add[maxn] , mul[maxn] ;</span><br><span class="line">bool rev[maxn] ;</span><br><span class="line"></span><br><span class="line">#define  null     0LL</span><br><span class="line">#define  left(<span class="keyword">u</span>)  ch[<span class="keyword">u</span>][0]</span><br><span class="line">#define  right(<span class="keyword">u</span>) ch[<span class="keyword">u</span>][1]</span><br><span class="line">#define  inc(x,y) &#123;x+=y;<span class="keyword">if</span>(x&gt;=ansmod)x-=ansmod;&#125;</span><br><span class="line"></span><br><span class="line">inline void Exchange(int&amp;a,int&amp;b) &#123;int c=a;a=b;b=c;&#125;</span><br><span class="line">inline bool Isrt(int <span class="keyword">u</span>) &#123; <span class="keyword">return</span> !fa[<span class="keyword">u</span>] || (left(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span> &amp;&amp;right(fa[<span class="keyword">u</span>])!=<span class="keyword">u</span>) ; &#125;</span><br><span class="line">inline void MUL(int <span class="keyword">u</span> , uint w) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">trueval[<span class="keyword">u</span>]*=w , val[<span class="keyword">u</span>]%=ansmod ;</span><br><span class="line">true<span class="keyword">sum</span>[<span class="keyword">u</span>]*=w , <span class="keyword">sum</span>[<span class="keyword">u</span>]%=ansmod ;</span><br><span class="line">truemul[<span class="keyword">u</span>]*=w , mul[<span class="keyword">u</span>]%=ansmod ;</span><br><span class="line">trueadd[<span class="keyword">u</span>]*=w , add[<span class="keyword">u</span>]%=ansmod ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ADD(int <span class="keyword">u</span> , uint w) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">trueinc(val[<span class="keyword">u</span>],w) ;</span><br><span class="line">true<span class="keyword">sum</span>[<span class="keyword">u</span>]+=sz[<span class="keyword">u</span>]*w , <span class="keyword">sum</span>[<span class="keyword">u</span>]%=ansmod ;</span><br><span class="line">trueinc(add[<span class="keyword">u</span>],w) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void <span class="keyword">Clear</span>(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">true<span class="keyword">if</span> (mul[<span class="keyword">u</span>]!=1) &#123;</span><br><span class="line">truetrueMUL(left(<span class="keyword">u</span>),mul[<span class="keyword">u</span>]) ; MUL(right(<span class="keyword">u</span>),mul[<span class="keyword">u</span>]) ; mul[<span class="keyword">u</span>] = 1 ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (add[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetrueADD(left(<span class="keyword">u</span>),add[<span class="keyword">u</span>]) ; ADD(right(<span class="keyword">u</span>),add[<span class="keyword">u</span>]) ; add[<span class="keyword">u</span>] = 0 ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (rev[<span class="keyword">u</span>]) &#123;</span><br><span class="line">truetruerev[left(<span class="keyword">u</span>)] ^= true ; rev[right(<span class="keyword">u</span>)] ^= true ;</span><br><span class="line">truetrueExchange(left(<span class="keyword">u</span>),right(<span class="keyword">u</span>)) ; rev[<span class="keyword">u</span>] = false ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void Maintain(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!<span class="keyword">u</span>) <span class="keyword">return</span> ;</span><br><span class="line">true<span class="keyword">sum</span>[<span class="keyword">u</span>] = val[<span class="keyword">u</span>] , sz[<span class="keyword">u</span>] = 1 ;</span><br><span class="line">true<span class="keyword">if</span> (left(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetrueinc(<span class="keyword">sum</span>[<span class="keyword">u</span>],<span class="keyword">sum</span>[left(<span class="keyword">u</span>)]) ;</span><br><span class="line">truetruesz[<span class="keyword">u</span>] += sz[left(<span class="keyword">u</span>)] ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (right(<span class="keyword">u</span>)) &#123;</span><br><span class="line">truetrueinc(<span class="keyword">sum</span>[<span class="keyword">u</span>],<span class="keyword">sum</span>[right(<span class="keyword">u</span>)]) ;</span><br><span class="line">truetruesz[<span class="keyword">u</span>] += sz[right(<span class="keyword">u</span>)] ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line">inline void <span class="keyword">Rot</span>(int x , int <span class="keyword">d</span>) &#123;</span><br><span class="line">trueint y=fa[x] , z=fa[y] ;</span><br><span class="line">true<span class="keyword">if</span> (left(z)==y) left(z) = x ;</span><br><span class="line">true<span class="keyword">else</span> <span class="keyword">if</span> (right(z)==y)right(z) = x ;</span><br><span class="line">truefa[x]=z , fa[y]=x , fa[ch[x][<span class="keyword">d</span>]]=y ;</span><br><span class="line">truech[y][!<span class="keyword">d</span>]=ch[x][<span class="keyword">d</span>] , ch[x][<span class="keyword">d</span>]=y ;</span><br><span class="line">trueMaintain(y) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Splay(int x) &#123;</span><br><span class="line">int y , z ;</span><br><span class="line">true<span class="keyword">Clear</span>(x) ;</span><br><span class="line">true<span class="keyword">while</span> (!Isrt(x)) &#123;</span><br><span class="line">truetruey=fa[x],z=fa[y] ;</span><br><span class="line">truetrue<span class="keyword">Clear</span>(z) , <span class="keyword">Clear</span>(y) , <span class="keyword">Clear</span>(x) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (Isrt(y)) <span class="keyword">Rot</span>(x,left(y)==x) ;</span><br><span class="line">truetrue<span class="keyword">else</span> <span class="keyword">if</span> (left(z)==y) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (left(y)==x) <span class="keyword">Rot</span>(y,1) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,0) ; <span class="keyword">Rot</span>(x,1) ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (right(y)==x) <span class="keyword">Rot</span>(y,0) ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> <span class="keyword">Rot</span>(x,1) ; <span class="keyword">Rot</span>(x,0) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueMaintain(x) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Access(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int v=null ; <span class="keyword">u</span> ; v=<span class="keyword">u</span>,<span class="keyword">u</span>=fa[<span class="keyword">u</span>]) Splay(<span class="keyword">u</span>),right(<span class="keyword">u</span>)=v,Maintain(<span class="keyword">u</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void MakeRoot(int <span class="keyword">u</span>) &#123;</span><br><span class="line">trueAccess(<span class="keyword">u</span>) , Splay(<span class="keyword">u</span>) , rev[<span class="keyword">u</span>]^=true ;</span><br><span class="line">&#125;</span><br><span class="line">inline void Cut(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueMakeRoot(v) ; Access(<span class="keyword">u</span>) , Splay(<span class="keyword">u</span>) ; fa[v] = left(<span class="keyword">u</span>) = null ;</span><br><span class="line">trueMaintain(<span class="keyword">u</span>) ;</span><br><span class="line">true<span class="comment">//Maintain(v) ;</span></span><br><span class="line">&#125;</span><br><span class="line">inline void Link(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueMakeRoot(<span class="keyword">u</span>) , fa[<span class="keyword">u</span>] = v ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainAdd(int <span class="keyword">u</span> , int v , uint w) &#123;</span><br><span class="line">trueMakeRoot(v) , Access(<span class="keyword">u</span>) , Splay(<span class="keyword">u</span>) ; ADD(<span class="keyword">u</span>,w) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainMul(int <span class="keyword">u</span> , int v , uint w) &#123;</span><br><span class="line">trueMakeRoot(v) , Access(<span class="keyword">u</span>) , Splay(<span class="keyword">u</span>) ; MUL(<span class="keyword">u</span>,w) ;</span><br><span class="line">&#125;</span><br><span class="line">inline void ChainSum(int <span class="keyword">u</span> , int v) &#123;</span><br><span class="line">trueMakeRoot(v) , Access(<span class="keyword">u</span>) , Splay(<span class="keyword">u</span>) ;</span><br><span class="line">trueprintf(<span class="string">"%d\n"</span>, (int)<span class="keyword">sum</span>[<span class="keyword">u</span>]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define  maxm  100010LL</span><br><span class="line"></span><br><span class="line">struct FST &#123; int to , next ; &#125; <span class="keyword">e</span>[maxm&lt;&lt;1] ;</span><br><span class="line">int star[maxn] = &#123;0&#125; , tote = 1 ;</span><br><span class="line">inline void AddEdge(int <span class="keyword">u</span> , int v) &#123; <span class="keyword">e</span>[++tote].to = v ; <span class="keyword">e</span>[tote].next = star[<span class="keyword">u</span>] ; star[<span class="keyword">u</span>] = tote ; &#125;</span><br><span class="line">inline void GetPar(int <span class="keyword">u</span>) &#123;</span><br><span class="line">true<span class="keyword">for</span> (int p=star[<span class="keyword">u</span>] ; p ; p=<span class="keyword">e</span>[p].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="keyword">e</span>[p].to != fa[<span class="keyword">u</span>])</span><br><span class="line">truetruetruefa[<span class="keyword">e</span>[p].to] = <span class="keyword">u</span> , GetPar(<span class="keyword">e</span>[p].to) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int <span class="keyword">n</span> , <span class="keyword">m</span> , i , <span class="keyword">u</span> , v , cmd ;</span><br><span class="line">uint w ;</span><br><span class="line">true#define <span class="keyword">READ</span></span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefreopen(<span class="string">"nt2012_wym_tree.in" ,"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"nt2012_wym_tree.out","w"</span>,stdout) ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">read</span>(<span class="keyword">n</span>) , <span class="keyword">read</span>(<span class="keyword">m</span>) ;</span><br><span class="line">trueRep (i,2,<span class="keyword">n</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrueAddEdge(<span class="keyword">u</span>,v) , AddEdge(v,<span class="keyword">u</span>) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,1,<span class="keyword">n</span>)</span><br><span class="line">truetruesz[i] = val[i] = <span class="keyword">sum</span>[i] = mul[i] = 1 ;</span><br><span class="line">trueGetPar(1) ;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">m</span> --&gt; 0) &#123;</span><br><span class="line">truetruereads(cmd) , <span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '+') <span class="keyword">read</span>(w) , ChainAdd(<span class="keyword">u</span>,v,w) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '-') Cut(<span class="keyword">u</span>,v) , <span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) , Link(<span class="keyword">u</span>,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '*') <span class="keyword">read</span>(w) , ChainMul(<span class="keyword">u</span>,v,w) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == '/') ChainSum(<span class="keyword">u</span>,v) ;</span><br><span class="line">true&#125;</span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true#<span class="keyword">else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">return</span> 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 2049: [Sdoi2008]Cave 洞穴勘测]]></title>
      <url>http://zhangtianxiang.github.io/2015/04/06/bzoj2049/</url>
      <content type="html"><![CDATA[<p>热烈庆祝我的blog可以显示多行注释了QAQ</p>
<a id="more"></a>
<h2 id="题意">题意</h2><p>给定森林,删边添边,查询连通性</p>
<h2 id="分析">分析</h2><p>用一个不常用的GetRoot即可</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************\</span><br><span class="line">* Author : ztx</span><br><span class="line">* Title  : [bzoj] 2049: [Sdoi2008]Cave 洞穴勘测</span><br><span class="line">* ALG    : LCT复习</span><br><span class="line">* CMT    :</span><br><span class="line">* Time   :</span><br><span class="line">\****************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GETCHAR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">true<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">1</span>&lt;&lt;<span class="number">15</span> ;</span><br><span class="line">true<span class="keyword">static</span> <span class="keyword">char</span> BUF[LEN] , *S = BUF , *T = BUF ;</span><br><span class="line">true<span class="keyword">if</span> (S == T) &#123;</span><br><span class="line">truetrueT = (S=BUF)+fread(BUF , <span class="number">1</span> , LEN , stdin) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (S == T) <span class="keyword">return</span> EOF ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> *S ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=GETCHAR() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = GETCHAR() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=GETCHAR() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=GETCHAR() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=GETCHAR() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  10010LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn] = &#123;<span class="number">0</span>&#125; , ch[maxn][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> rev[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  null     0LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  left(u)  ch[u][0]</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  right(u) ch[u][1]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Exchange</span><span class="params">(<span class="keyword">int</span>&amp;a,<span class="keyword">int</span>&amp;b)</span> </span>&#123;<span class="keyword">int</span> c=a;a=b;b=c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Isrt</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">return</span> !fa[u] || (left(fa[u])!=u&amp;&amp;right(fa[u])!=u) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Clear</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (!u) <span class="keyword">return</span> ;</span><br><span class="line">true<span class="keyword">if</span> (rev[u]) &#123;</span><br><span class="line">truetruerev[u] = <span class="keyword">false</span> ;</span><br><span class="line">truetrueExchange(left(u),right(u)) ;</span><br><span class="line">truetruerev[left(u)] ^= <span class="keyword">true</span> ;</span><br><span class="line">truetruerev[right(u)] ^= <span class="keyword">true</span> ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> d)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> y = fa[x] , z = fa[y] ;</span><br><span class="line">true<span class="keyword">if</span> (left(z) == y) left(z) = x ;</span><br><span class="line">true<span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(right(z)</span> </span>== y) right(z) = x ;</span><br><span class="line">truefa[x] = z , fa[ch[x][d]] = y , ch[y][!d] = ch[x][d] ;</span><br><span class="line">truech[x][d] = y , fa[y] = x ;</span><br><span class="line"><span class="comment">//	Maintain(y);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> y , z ;</span><br><span class="line">trueClear(x) ;</span><br><span class="line">true<span class="keyword">while</span> (!Isrt(x)) &#123;</span><br><span class="line">truetruey = fa[x] , z = fa[y] ;</span><br><span class="line">truetrueClear(z) , Clear(y) , Clear(x) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (Isrt(y)) Rot(x,ch[y][<span class="number">0</span>]==x) ;</span><br><span class="line">truetrue<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(ch[z][0] == y)</span> </span>&#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (ch[y][<span class="number">0</span>] == x) Rot(y,<span class="number">1</span>) ;</span><br><span class="line">truetruetrue<span class="function"><span class="keyword">else</span> <span class="title">Rot</span><span class="params">(x,0)</span> </span>; Rot(x,<span class="number">1</span>) ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span>(ch[y][<span class="number">1</span>] == x) Rot(y,<span class="number">0</span>) ;</span><br><span class="line">truetruetrue<span class="function"><span class="keyword">else</span> <span class="title">Rot</span><span class="params">(x,1)</span> </span>; Rot(x,<span class="number">0</span>) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="comment">//Maintain(x) ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Access</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">for</span> (<span class="keyword">int</span> v=null ; u ; right(u)=v,v=u,u=fa[u]) Splay(u) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MakeRoot</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">trueAccess(u) , Splay(u) , rev[u] ^= <span class="keyword">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">trueMakeRoot(u) , fa[u] = v ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">trueMakeRoot(u) , Access(v) , Splay(v) , fa[u]=left(v)=null ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetRoot</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">for</span> (Access(u),Splay(u) ; Clear(u),left(u) ; u=left(u)) ; <span class="keyword">return</span> u ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">true<span class="built_in">puts</span>(GetRoot(u)==GetRoot(v) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , cmd , u , v ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) , read(m) ;</span><br><span class="line">true<span class="keyword">while</span> (m --&gt; <span class="number">0</span>) &#123;</span><br><span class="line">truetruereads(cmd) , read(u) , read(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == <span class="string">'C'</span>) Link(u,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == <span class="string">'D'</span>) Cut(u,v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == <span class="string">'Q'</span>) Query(u,v) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3754: Tree之最小方差树]]></title>
      <url>http://zhangtianxiang.github.io/2015/04/06/bzoj3754/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>rt</p>
<a id="more"></a>
<h2 id="分析">分析</h2><p>枚举方差即可<br>手抖毁一生</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************\</span><br><span class="line">* Author : ztx</span><br><span class="line">* Title  : [bzoj] 3754: Tree之最小方差树</span><br><span class="line">* ALG    : 枚举</span><br><span class="line">* CMT    : </span><br><span class="line">* Time   :</span><br><span class="line">\****************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db ;</span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  2010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  2010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  infi  10000000.0F</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sqr(x) ((x)*(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> EDGE &#123; <span class="keyword">int</span> u , v , w ; db ww ; &#125; e[maxm] ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> EDGE&amp; a , <span class="keyword">const</span> EDGE&amp; b)</span> </span>&#123; <span class="keyword">return</span> a.w &lt; b.w ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> EDGE&amp; a , <span class="keyword">const</span> EDGE&amp; b)</span> </span>&#123; <span class="keyword">return</span> a.ww &lt; b.ww ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxn] ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetAnc</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">return</span> par[u] ? par[u]=GetAnc(par[u]) : u ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">trueu = GetAnc(u) , v = GetAnc(v) ;</span><br><span class="line">true<span class="keyword">if</span> (u == v) <span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">truepar[u] = v ; <span class="keyword">return</span> <span class="keyword">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , sum , sum0 , cnt ;</span><br><span class="line">db now = <span class="number">0</span> , ave = <span class="number">0</span> , ans = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GST</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line">true<span class="built_in">memset</span>(par , <span class="number">0</span> , <span class="keyword">sizeof</span> par) ;</span><br><span class="line">trueave = (db)sum0/(db)(n-<span class="number">1</span>) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,m) &#123;</span><br><span class="line">truetruee[i].ww = sqr((db)e[i].w-ave) ;</span><br><span class="line">true&#125;</span><br><span class="line">truestd::sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp2) ;</span><br><span class="line">truesum = cnt = <span class="number">0</span> , now = <span class="number">0</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,m) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (Union(e[i].u,e[i].v)) &#123;</span><br><span class="line">truetruetruesum += e[i].w ;</span><br><span class="line">truetruetruenow += e[i].ww ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (++cnt == n-<span class="number">1</span>) <span class="keyword">break</span> ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> ((cnt!=n-<span class="number">1</span>) || (sum!=sum0)) <span class="keyword">return</span> ;</span><br><span class="line">truenow /= (db)(n-<span class="number">1</span>) ;</span><br><span class="line">true<span class="keyword">if</span> (now &lt; ans) ans = now ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , smin , smax ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">define</span> READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">"tree.in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"tree.out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) , read(m) ;</span><br><span class="line">true<span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"0.0000"</span>) ; <span class="keyword">goto</span> END ; &#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,m)</span><br><span class="line">truetrueread(e[i].u) ,</span><br><span class="line">truetrueread(e[i].v) ,</span><br><span class="line">truetrueread(e[i].w) ;</span><br><span class="line">truestd::sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp) ;</span><br><span class="line">truesmin = smax = <span class="number">0</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n-<span class="number">1</span>)</span><br><span class="line">truetruesmin += e[i].w ,</span><br><span class="line">truetruesmax += e[m-i+<span class="number">1</span>].w ;</span><br><span class="line">truetrue<span class="comment">//smax += e[n-i+1].w ; 剁手QAQ</span></span><br><span class="line">trueans = infi ;</span><br><span class="line">trueRep (sum0,smin,smax)</span><br><span class="line">truetrueGST() ;</span><br><span class="line">true<span class="keyword">if</span> (ans == infi) <span class="built_in">puts</span>(<span class="string">"0.0000"</span>) ;</span><br><span class="line">true<span class="function"><span class="keyword">else</span> <span class="title">printf</span><span class="params">("%.4lf\n", <span class="built_in">sqrt</span>(ans)</span>) </span>;</span><br><span class="line">trueEND:;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">3 3</span><br><span class="line">1 2 1</span><br><span class="line">2 3 2</span><br><span class="line">3 1 3</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[picture] saber !]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/28/%5Bpicture%5Dsaber/</url>
      <content type="html"><![CDATA[<p>bgm<br>1<a href="http://www.xiami.com/song/1768967720?spm=0.0.0.0.nSr6Gw" target="_blank" rel="external">あなたがいた森</a><br>2<a href="http://www.xiami.com/song/3493812?spm=0.0.0.0.nSr6Gw" target="_blank" rel="external">孤独な巡礼</a><br>3<a href="http://www.xiami.com/song/3493833?spm=0.0.0.0.nSr6Gw" target="_blank" rel="external">騎士王の誇り</a><br><a id="more"></a><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjlt32aoj20nm0y8tcf.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/eb060c3ejw1epkjltr73aj20nm0ytjwv.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjlufditj21ki29rdwl.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjlv84nnj21kw1w9h0f.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjlwbbnsj21kw1ex4fj.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjlxfo4ej21gc2304hy.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjlyaw2pj21kw28ne81.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjlzkkzoj21kw1lr7wh.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjm0fqd5j21kw1df1kx.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjm1a7sqj21i3230dvc.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjm24s18j21jb2307pg.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjm2vpyhj21gs2304bv.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjm45g9kj21kw1wjh71.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjm56fpxj211a230k6c.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjm5y866j21kw1ui4g2.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjm6xafij21iy230qp0.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjm7yjqfj31kp2ahql5.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjm8mox7j21kw0zkqc0.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjme7sfdj21kw26j4f8.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmft6zjj21kw1ek0x4.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjmgh6drj21kw13g144.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmh8uebj21kw230qlr.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/eb060c3ejw1epkjmht6yfj21hc0u0qj6.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmj0d3aj21hc0u04c1.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/eb060c3ejw1epkjmk3j99j21kw0yo0xh.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjmkwo40j31hc0u0acq.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmle4inj21hc0u00y7.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/eb060c3ejw1epkjmmkmo6j21hc0u0n5k.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1epkjmndbwtj21hc0u041z.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/eb060c3ejw1epkjmo421mj21kw0w0dkj.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmos5tmj21kw16oahw.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/eb060c3ejw1epkjmpt7vbj21kw14k1kx.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjmqsgm5j31kw0w0wjy.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjmrl1ssj31hc0u043d.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjmsiyrnj31hc0u010k.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjmt3kggj31kw0zkgpq.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjmv5e0ij31kw0zkqgh.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjmvqz68j31hc0u049c.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjmx3k8xj31kw0vzwld.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjmxw58ej31kw0wxgsk.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjmyrhr7j31hc0u0amg.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjn05t6sj31kw0zk1b0.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjn15g5qj31kw0vz4fv.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjn2yq5zj31kw1304o9.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjn4gk96j31kw0vz4gt.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjn6cflaj31kw0vz7fn.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjn7atjrj31gc0tfgxm.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjn7wptpj31kw0vz44e.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjn95a0bj31jb0v3k7h.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjna3uzuj311a0ky45e.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjnd9fy7j31kw0vz15q.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjnfx0szj31iy0uw18v.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjngwhg4j31hy0ucqex.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjnhm96vj31kw0w0nb3.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjnihuogj31hc0u0gn0.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnjl9ytj31id0ultne.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnkbdujj31kw0vzqfx.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjnm3wosj31kw0w0h9x.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjnmxjlxj31hc0u04b7.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjno1w12j31kw0nuwip.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjnonbw8j31hc0u0wo4.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnph6ikj31hc0u0tcb.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnqvig0j31hc0u0myj.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjns4o2mj31kw0vzn3a.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjntgesoj31kp0vwk45.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnu9tfhj31hc0u07du.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnvhs9oj31hc0u045b.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnwrzvyj31kw0vzki9.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjnxs5e3j31kw0zkaii.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjnztortj31hc0xctna.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkjo0nzozj31kw0w0n2o.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjo1hsf5j31hc0u0ali.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjo227mkj31hc0u0diu.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjo2l62yj311y0lc0vy.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkju6a2abj31hc0u0juh.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkju6wvqpj31gi0tj43j.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/0062s7SFjw1epkju79i60j31hc0u0433.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkju8hh3mj31hc0u07fj.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkju91yucj31hc0u0jvu.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/0062s7SFjw1epkjua34luj31hc0u0n7q.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjua3uedj31kw1kwai5.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/0062s7SFjw1epkjub2pinj31hc0u0dxf.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/0062s7SFjw1epkjucy0e3j31hc0u00xa.jpg" alt=""></p>
<p><br><embed src="http://www.xiami.com/widget/45574524_1768967720,3493812,3493833,_235_250_53a1b8_ffffff_1/multiPlayer.swf" type="application/x-shockwave-flash" width="235" height="250" wmode="opaque"><br></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3052: [wc2013]糖果公园]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/26/bzoj3052/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>大家直接看题目好了</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3052" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>莫队算法</p>
<h2 id="代码">代码</h2><p>原谅我用快读卡过去&gt;_&lt;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> chin[<span class="number">10000000</span>],chout[<span class="number">5000000</span>],*pi=chin,*po=chout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(TP &amp;ret)</span></span>&#123;</span><br><span class="line">trueret=<span class="number">0</span>;</span><br><span class="line">true<span class="keyword">while</span>(*pi&lt;<span class="number">48</span>) pi++;</span><br><span class="line">true<span class="keyword">while</span>(*pi&gt;<span class="number">47</span>) ret=ret*<span class="number">10</span>+*pi++-<span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(TP x)</span></span>&#123;</span><br><span class="line">true<span class="keyword">static</span> <span class="keyword">int</span> tim=<span class="number">0</span>;</span><br><span class="line">true<span class="keyword">static</span> <span class="keyword">char</span> p[<span class="number">30</span>];</span><br><span class="line">true<span class="keyword">while</span>(x) p[++tim]=x%<span class="number">10</span>+<span class="string">'0'</span>,x/=<span class="number">10</span>;</span><br><span class="line">true<span class="keyword">while</span>(tim) *po++=p[tim--];</span><br><span class="line">true*po++=<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  100010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  100010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxq  100010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxk  18LL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//struct FST &#123; int to , next ; &#125; e[maxm&lt;&lt;1] ;</span></span><br><span class="line"><span class="keyword">int</span> next[maxm&lt;&lt;<span class="number">1</span>] , to[maxm&lt;&lt;<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">int</span> star[maxn] = &#123;<span class="number">0</span>&#125; , tote = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123; ++tote ; to[tote] = v ; next[tote] = star[u] ; star[u] = tote ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , timnow ;</span><br><span class="line">ll ansnow ;</span><br><span class="line"><span class="keyword">int</span> cntblc , szblc , idx , top ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[maxn] , cnt[maxn] = &#123;<span class="number">0</span>&#125; , last[maxn] ;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn] , sta[maxn] , belong[maxn] , dep[maxn] , size[maxn] , par[maxn][maxk] ;</span><br><span class="line">ll ans[maxq] ;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> QUERY &#123;</span><br><span class="line">true<span class="keyword">int</span> u , v , lca , id , tim ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> QUERY&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (belong[u]!=belong[b.u]) <span class="keyword">return</span> belong[u]&lt;belong[b.u] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (belong[v] != belong[b.v]) <span class="keyword">return</span> belong[v]&lt;belong[b.v] ;</span><br><span class="line">truetrue<span class="keyword">return</span> id &lt; b.id ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125; q[maxq] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> CHANGE &#123;</span><br><span class="line">true<span class="keyword">int</span> pos , from , to ;</span><br><span class="line">&#125; c[maxq] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> v , p ;</span><br><span class="line">truesta[++top] = u ;</span><br><span class="line">truepar[u][<span class="number">0</span>] = fa ;</span><br><span class="line">truedfn[u] = ++idx ;</span><br><span class="line">truedep[u] = dep[fa]+<span class="number">1</span> ;</span><br><span class="line">truesize[u] = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[u] ; p ; p = next[p])</span><br><span class="line">truetrue<span class="keyword">if</span> (v=to[p] , v!=fa) &#123;</span><br><span class="line">truetruetruedfs(v , u) ;</span><br><span class="line">truetruetruesize[u] += size[v] ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (size[u] &gt;= szblc) &#123;</span><br><span class="line">truetruetruetruesize[u] = <span class="number">0</span> ;</span><br><span class="line">truetruetruetruecntblc ++ ;</span><br><span class="line">truetruetruetrue<span class="keyword">while</span> (sta[top] != u) belong[sta[top--]] = cntblc ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truesize[u] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , k ;</span><br><span class="line">trueRep (k,<span class="number">1</span>,maxk-<span class="number">1</span>)</span><br><span class="line">truetrueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetruetruepar[i][k] = par[par[i][k-<span class="number">1</span>]][k-<span class="number">1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> k ;</span><br><span class="line">true<span class="keyword">if</span> (dep[u] &lt; dep[v]) std::swap(u,v) ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[par[u][k]] &gt;= dep[v]) u = par[u][k] ;</span><br><span class="line">true<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (par[u][k] != par[v][k])</span><br><span class="line">truetruetrueu = par[u][k] , v = par[v][k] ;</span><br><span class="line">true<span class="keyword">return</span> par[u][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll v[maxn] , w[maxm] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (vis[u]) &#123; vis[u]=<span class="keyword">false</span>;ansnow-=v[col[u]]*w[cnt[col[u]]--]; &#125;</span><br><span class="line">true<span class="keyword">else</span> &#123; vis[u]=<span class="keyword">true</span>;ansnow+=v[col[u]]*w[++cnt[col[u]]]; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (vis[u]) &#123;</span><br><span class="line">truetrueReverse(u) ;</span><br><span class="line">truetruecol[u] = c ;</span><br><span class="line">truetrueReverse(u) ;</span><br><span class="line">true&#125; <span class="keyword">else</span> col[u] = c ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MoveTo</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (u != v)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[u] &gt; dep[v]) Reverse(u) , u = par[u][<span class="number">0</span>] ;</span><br><span class="line">truetrue<span class="function"><span class="keyword">else</span> <span class="title">Reverse</span><span class="params">(v)</span> , v </span>= par[v][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetAns</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">trueReverse(q[i].lca) ;</span><br><span class="line">trueans[q[i].id] = ansnow ;</span><br><span class="line">trueReverse(q[i].lca) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , a , b , Q , cmd ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">define</span> READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">"park.in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"park.out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">truefread(pi,<span class="number">1</span>,<span class="number">10000000</span>,stdin);</span><br><span class="line">trueread(n) , read(m) , read(Q) ;</span><br><span class="line">trueszblc = (<span class="keyword">int</span>)<span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3.0</span>)*<span class="number">.5</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,m) read(v[i]) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) read(w[i]) ;</span><br><span class="line">trueRep (i,<span class="number">2</span>,n) &#123;</span><br><span class="line">truetrueread(a) , read(b) ;</span><br><span class="line">truetrueAddEdge(a,b) , AddEdge(b,a) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) read(col[i]) , last[i] = col[i] ;</span><br><span class="line">truecntblc = idx = dep[<span class="number">0</span>] = ansnow = top = <span class="number">0</span> ;</span><br><span class="line">truedfs(<span class="number">1</span>,<span class="number">0</span>) ;</span><br><span class="line">truecntblc ++ ;</span><br><span class="line">true<span class="keyword">while</span> (top) belong[sta[top--]] = cntblc ;</span><br><span class="line">trueST() ;</span><br><span class="line">true<span class="keyword">int</span> totq = <span class="number">0</span> , totc = <span class="number">0</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,Q) &#123;</span><br><span class="line">truetrueread(cmd) , read(a) , read(b) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd) &#123;</span><br><span class="line">truetruetruetotq ++ ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (belong[a] &gt; belong[b]) std::swap(a,b) ;</span><br><span class="line">truetruetrueq[totq].lca = LCA(a,b) ;</span><br><span class="line">truetruetrueq[totq].id = totq , q[totq].u = a , q[totq].v = b ;</span><br><span class="line">truetruetrueq[totq].tim = totc ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetotc ++ ;</span><br><span class="line">truetruetruec[totc].pos = a ;</span><br><span class="line">truetruetruec[totc].from = last[a] ;</span><br><span class="line">truetruetruec[totc].to = last[a] = b ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">truetimnow = <span class="number">1</span> ;</span><br><span class="line">truestd::sort(q+<span class="number">1</span>,q+totq+<span class="number">1</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (timnow &lt;= q[<span class="number">1</span>].tim) Modify(c[timnow].pos,c[timnow].to) , ++timnow ;</span><br><span class="line">trueMoveTo(q[<span class="number">1</span>].u,q[<span class="number">1</span>].v) ;</span><br><span class="line">trueGetAns(<span class="number">1</span>) ;</span><br><span class="line">trueRep (i,<span class="number">2</span>,totq) &#123;</span><br><span class="line">truetrue<span class="keyword">while</span> (timnow &lt;= q[i].tim) Modify(c[timnow].pos,c[timnow].to) , ++timnow ;</span><br><span class="line">truetrue<span class="keyword">while</span> (timnow-<span class="number">1</span> &gt; q[i].tim) Modify(c[timnow-<span class="number">1</span>].pos,c[timnow-<span class="number">1</span>].from) , --timnow ;</span><br><span class="line">truetrueMoveTo(q[i-<span class="number">1</span>].u,q[i].u) ;</span><br><span class="line">truetrueMoveTo(q[i-<span class="number">1</span>].v,q[i].v) ;</span><br><span class="line">truetrueGetAns(i) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,totq) print(ans[i]) ;</span><br><span class="line">truefwrite(chout,<span class="number">1</span>,po-chout,stdout);</span><br><span class="line"></span><br><span class="line">true<span class="comment">//printf("%.2lf\n",clock()/1000.0) ;</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[spoj] 10707: Count on a tree II]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/26/spoj10707/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>一棵树上,每个节点都有颜色,每次询问树链上颜色种数.</p>
<a id="more"></a>
<p><a href="http://www.spoj.com/problems/COT2/" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>莫队算法</p>
<h2 id="代码">代码</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#define Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="comment">#define Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line">typedef long long ll ;</span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;inline void <span class="keyword">read</span>(TP&amp; ret) &#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;template &lt;typename TP&gt;</span><br><span class="line">inline void reads(TP&amp; ret) &#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define  maxn  40010LL</span></span><br><span class="line"><span class="comment">#define  maxm  40010LL</span></span><br><span class="line"><span class="comment">#define  maxc  40010LL</span></span><br><span class="line"><span class="comment">#define  maxq  100010LL</span></span><br><span class="line"><span class="comment">#define  maxk  17LL</span></span><br><span class="line"></span><br><span class="line">//struct FST &#123; <span class="keyword">int</span> to , <span class="keyword">next</span> ; &#125; e[maxm&lt;&lt;<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">int</span> to[maxm&lt;&lt;<span class="number">1</span>] , <span class="keyword">next</span>[maxm&lt;&lt;<span class="number">1</span>] , star[maxn] = <span class="string">&#123;0&#125;</span> , tote = <span class="number">1</span> ;</span><br><span class="line">inline void AddEdge(<span class="keyword">int</span> u , <span class="keyword">int</span> v) &#123; to[++tote] = v ; <span class="keyword">next</span>[tote] = star[u] ; star[u] = tote ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , <span class="keyword">m</span> , ansnow ;</span><br><span class="line"><span class="keyword">int</span> cntblc , szblc , idx , top ;</span><br><span class="line"><span class="keyword">int</span> col[maxn] , cnt[maxc] = <span class="string">&#123;0&#125;</span> ;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn] , sta[maxn] , belong[maxn] , dep[maxn] , size[maxn] , par[maxn][maxk] ;</span><br><span class="line"><span class="keyword">int</span> ans[maxq] ;</span><br><span class="line">bool vis[maxn] = <span class="string">&#123;0&#125;</span> ;</span><br><span class="line"></span><br><span class="line">struct QUERY &#123;</span><br><span class="line">true<span class="keyword">int</span> u , v , lca , id ;</span><br><span class="line">truebool operator &lt; (const QUERY&amp; b) const</span><br><span class="line">true&#123; <span class="keyword">return</span> belong[u]==belong[b.u]? dfn[v]&lt;dfn[b.v] : belong[u]&lt;belong[b.u] ; &#125;</span><br><span class="line">&#125; <span class="string">q[maxq]</span> ;</span><br><span class="line"></span><br><span class="line">inline void dfs(<span class="keyword">int</span> u , <span class="keyword">int</span> fa) &#123;</span><br><span class="line"><span class="keyword">int</span> v , p ;</span><br><span class="line">truesta[++top] = u ;</span><br><span class="line">truepar[u][<span class="number">0</span>] = fa ;</span><br><span class="line">truedfn[u] = ++idx ;</span><br><span class="line">truedep[u] = dep[fa]+<span class="number">1</span> ;</span><br><span class="line">truesize[u] = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[u] ; p ; p = <span class="keyword">next</span>[p])</span><br><span class="line">truetrue<span class="keyword">if</span> (v=to[p] , v!=fa) &#123;</span><br><span class="line">truetruetruedfs(v , u) ;</span><br><span class="line">truetruetruesize[u] += size[v] ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (size[u] &gt;= szblc) &#123;</span><br><span class="line">truetruetruetruesize[u] = <span class="number">0</span> ; cntblc ++ ;</span><br><span class="line">truetruetruetrue<span class="keyword">while</span> (sta[top] != u) belong[sta[top--]] = cntblc ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truesize[u] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void ST() &#123;</span><br><span class="line"><span class="keyword">int</span> i , k ;</span><br><span class="line">trueRep (k,<span class="number">1</span>,maxk-<span class="number">1</span>)</span><br><span class="line">truetrueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetruetruepar[i][k] = par[par[i][k-<span class="number">1</span>]][k-<span class="number">1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline <span class="keyword">int</span> LCA(<span class="keyword">int</span> u , <span class="keyword">int</span> v) &#123;</span><br><span class="line">true<span class="keyword">int</span> k ;</span><br><span class="line">true<span class="keyword">if</span> (dep[u] &lt; dep[v]) std::swap(u,v) ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[par[u][k]] &gt;= dep[v]) u = par[u][k] ;</span><br><span class="line">true<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (par[u][k] != par[v][k])</span><br><span class="line">truetruetrueu = par[u][k] , v = par[v][k] ;</span><br><span class="line">true<span class="keyword">return</span> par[u][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void Reverse(<span class="keyword">int</span> u) &#123;</span><br><span class="line">true<span class="keyword">if</span> (vis[u]) &#123; vis[u]=false;cnt[col[u]]--;<span class="keyword">if</span>(cnt[col[u]]==<span class="number">0</span>)ansnow--; &#125;</span><br><span class="line">true<span class="keyword">else</span> &#123; vis[u]=true;cnt[col[u]]++;<span class="keyword">if</span>(cnt[col[u]]==<span class="number">1</span>)ansnow++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void MoveTo(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">true<span class="keyword">while</span> (u != v)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[u] &gt; dep[v]) Reverse(u) , u = par[u][<span class="number">0</span>] ;</span><br><span class="line">truetrue<span class="keyword">else</span> Reverse(v) , v = par[v][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void GetAns(<span class="keyword">int</span> i) &#123;</span><br><span class="line">trueReverse(<span class="string">q[i]</span>.lca) ;</span><br><span class="line">trueans[<span class="string">q[i]</span>.id] = ansnow ;</span><br><span class="line">trueReverse(<span class="string">q[i]</span>.lca) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[maxn] , rec[maxn] ;</span><br><span class="line"></span><br><span class="line">inline bool cmp(const <span class="keyword">int</span>&amp; a , const <span class="keyword">int</span>&amp; b) &#123;</span><br><span class="line">true<span class="keyword">return</span> rec[a]==rec[b]?a&lt;b:rec[a]&lt;rec[b] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line"><span class="keyword">int</span> i , u , v ;</span><br><span class="line"><span class="regexp">//</span>	<span class="comment">#define READ</span></span><br><span class="line">true<span class="comment">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="comment">#endif</span></span><br><span class="line">true<span class="keyword">read</span>(n) , <span class="keyword">read</span>(<span class="keyword">m</span>) ;</span><br><span class="line">true<span class="keyword">if</span> (n &lt; <span class="number">5</span>) szblc = n ;</span><br><span class="line">true<span class="keyword">else</span> szblc = (<span class="keyword">int</span>)pow(n,<span class="number">2.0</span>/<span class="number">3.0</span>) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) <span class="keyword">read</span>(rec[i]) , t[i] = i ;</span><br><span class="line">truestd::<span class="keyword">sort</span>(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp) ;</span><br><span class="line">truet[<span class="number">0</span>] = -<span class="number">1</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (rec[t[i]] == rec[t[i-<span class="number">1</span>]]) col[t[i]] = col[t[i-<span class="number">1</span>]] ;</span><br><span class="line">truetrue<span class="keyword">else</span> col[t[i]] = i ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">2</span>,n) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(u) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrueAddEdge(u,v) , AddEdge(v,u) ;</span><br><span class="line">true&#125;</span><br><span class="line">truecntblc = idx = dep[<span class="number">0</span>] = ansnow = top = <span class="number">0</span> ;</span><br><span class="line">truedfs(<span class="number">1</span>,<span class="number">0</span>) ;</span><br><span class="line">truecntblc ++ ;</span><br><span class="line">true<span class="keyword">while</span> (top) belong[sta[top--]] = cntblc ;</span><br><span class="line">trueST() ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,<span class="keyword">m</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(u) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (belong[u] &gt; belong[v]) std::swap(u,v) ;</span><br><span class="line">truetrue<span class="string">q[i]</span>.u = u , <span class="string">q[i]</span>.v = v , <span class="string">q[i]</span>.lca = LCA(u,v) , <span class="string">q[i]</span>.id = i ;</span><br><span class="line">true&#125;</span><br><span class="line">truestd::<span class="keyword">sort</span>(<span class="keyword">q</span>+<span class="number">1</span>,<span class="keyword">q</span>+<span class="keyword">m</span>+<span class="number">1</span>) ;</span><br><span class="line">trueMoveTo(<span class="string">q[1]</span>.u,<span class="string">q[1]</span>.v) ;</span><br><span class="line">trueGetAns(<span class="number">1</span>) ;</span><br><span class="line">trueRep (i,<span class="number">2</span>,<span class="keyword">m</span>) &#123;</span><br><span class="line">truetrueMoveTo(<span class="string">q[i-1]</span>.u,<span class="string">q[i]</span>.u) ;</span><br><span class="line">truetrueMoveTo(<span class="string">q[i-1]</span>.v,<span class="string">q[i]</span>.v) ;</span><br><span class="line">truetrueGetAns(i) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,<span class="keyword">m</span>) <span class="keyword">printf</span>(<span class="string">"<span class="variable">%d</span>\n"</span>, ans[i]) ;</span><br><span class="line">true<span class="comment">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="comment">#else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="comment">#endif</span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3757: 苹果树]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/26/bzoj3757/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>一棵树上每个节点都有颜色,每次回答树链上有几种颜色,有时询问视两种颜色为同一种颜色</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3757" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>莫队算法</p>
<h2 id="代码">代码</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#define Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="comment">#define Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void <span class="keyword">read</span>(TP&amp; ret) &#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void reads(TP&amp; ret) &#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define  maxn  50010LL</span></span><br><span class="line"><span class="comment">#define  maxm  50010LL</span></span><br><span class="line"><span class="comment">#define  maxq  100010LL</span></span><br><span class="line"><span class="comment">#define  maxk  17LL</span></span><br><span class="line"></span><br><span class="line">struct FST &#123; <span class="keyword">int</span> to , <span class="keyword">next</span> ; &#125; e[maxm&lt;&lt;<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">int</span> star[maxn] = <span class="string">&#123;0&#125;</span> , tote = <span class="number">1</span> ;</span><br><span class="line">void AddEdge(<span class="keyword">int</span> u , <span class="keyword">int</span> v) &#123; e[++tote].to = v ; e[tote].<span class="keyword">next</span> = star[u] ; star[u] = tote ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , <span class="keyword">m</span> , root , ansnow ;</span><br><span class="line"><span class="keyword">int</span> cntblc , szblc , idx , top ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[maxn] , cnt[maxn] = <span class="string">&#123;0&#125;</span> ;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn] , sta[maxn] , belong[maxn] , dep[maxn] , size[maxn] , par[maxn][maxk] ;</span><br><span class="line"><span class="keyword">int</span> ans[maxq] ;</span><br><span class="line">bool vis[maxn] = <span class="string">&#123;0&#125;</span> ;</span><br><span class="line"></span><br><span class="line">struct QUERY &#123;</span><br><span class="line">true<span class="keyword">int</span> u , v , a , b , id ;</span><br><span class="line">truebool operator &lt; (const QUERY&amp; b) const</span><br><span class="line">true&#123; <span class="keyword">return</span> belong[u]==belong[b.u]? dfn[v]&lt;dfn[b.v] : belong[u]&lt;belong[b.u] ; &#125;</span><br><span class="line">&#125; <span class="string">q[maxq]</span> ;</span><br><span class="line"></span><br><span class="line">void dfs(<span class="keyword">int</span> u , <span class="keyword">int</span> fa) &#123;</span><br><span class="line"><span class="keyword">int</span> v , p ;</span><br><span class="line">truesta[++top] = u ;</span><br><span class="line">truepar[u][<span class="number">0</span>] = fa ;</span><br><span class="line">truedfn[u] = ++idx ;</span><br><span class="line">truedep[u] = dep[fa]+<span class="number">1</span> ;</span><br><span class="line">truesize[u] = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[u] ; p ; p = e[p].<span class="keyword">next</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (v=e[p].to , v!=fa) &#123;</span><br><span class="line">truetruetruedfs(v , u) ;</span><br><span class="line">truetruetruesize[u] += size[v] ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (size[u] &gt;= szblc) &#123;</span><br><span class="line">truetruetruetruesize[u] = <span class="number">0</span> ;</span><br><span class="line">truetruetruetruecntblc ++ ;</span><br><span class="line">truetruetruetrue<span class="keyword">while</span> (sta[top] != u) belong[sta[top--]] = cntblc ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truesize[u] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ST() &#123;</span><br><span class="line"><span class="keyword">int</span> i , k ;</span><br><span class="line">trueRep (k,<span class="number">1</span>,maxk-<span class="number">1</span>)</span><br><span class="line">truetrueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetruetruepar[i][k] = par[par[i][k-<span class="number">1</span>]][k-<span class="number">1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> LCA(<span class="keyword">int</span> u , <span class="keyword">int</span> v) &#123;</span><br><span class="line">true<span class="keyword">int</span> k ;</span><br><span class="line">true<span class="keyword">if</span> (dep[u] &lt; dep[v]) std::swap(u,v) ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[par[u][k]] &gt;= dep[v]) u = par[u][k] ;</span><br><span class="line">true<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (par[u][k] != par[v][k])</span><br><span class="line">truetruetrueu = par[u][k] , v = par[v][k] ;</span><br><span class="line">true<span class="keyword">return</span> par[u][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Reverse(<span class="keyword">int</span> u) &#123;</span><br><span class="line">true<span class="keyword">if</span> (!vis[u]) &#123; vis[u]=true;cnt[col[u]]++;<span class="keyword">if</span>(cnt[col[u]]==<span class="number">1</span>)ansnow++; &#125;</span><br><span class="line">true<span class="keyword">else</span> &#123; vis[u]=false;cnt[col[u]]--;<span class="keyword">if</span>(cnt[col[u]]==<span class="number">0</span>)ansnow--; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MoveTo(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">true<span class="keyword">while</span> (u != v)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[u] &gt; dep[v]) Reverse(u) , u = par[u][<span class="number">0</span>] ;</span><br><span class="line">truetrue<span class="keyword">else</span> Reverse(v) , v = par[v][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GetAns(<span class="keyword">int</span> i , <span class="keyword">int</span> lca) &#123;</span><br><span class="line">trueReverse(lca) ;</span><br><span class="line">trueans[<span class="string">q[i]</span>.id] = ansnow ;</span><br><span class="line">true<span class="keyword">if</span> (<span class="string">q[i]</span>.a!=<span class="string">q[i]</span>.b &amp;&amp; cnt[<span class="string">q[i]</span>.a] &amp;&amp; cnt[<span class="string">q[i]</span>.b]) ans[<span class="string">q[i]</span>.id] -- ;</span><br><span class="line">trueReverse(lca) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line"><span class="keyword">int</span> i , u , v , lca ;</span><br><span class="line"><span class="regexp">//</span>	<span class="comment">#define READ</span></span><br><span class="line">true<span class="comment">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="comment">#endif</span></span><br><span class="line">true<span class="keyword">read</span>(n) , <span class="keyword">read</span>(<span class="keyword">m</span>) ;</span><br><span class="line">true<span class="keyword">if</span> (n &lt; <span class="number">5</span>) szblc = n ;</span><br><span class="line">true<span class="keyword">else</span> szblc = (<span class="keyword">int</span>)pow(n,<span class="number">2.0</span>/<span class="number">3.0</span>) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) <span class="keyword">read</span>(col[i]) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(u) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (!u) root = v ;</span><br><span class="line">truetrue<span class="keyword">else</span> <span class="keyword">if</span> (!v) root = u ;</span><br><span class="line">truetrue<span class="keyword">else</span> AddEdge(u,v) , AddEdge(v,u) ;</span><br><span class="line">true&#125;</span><br><span class="line">truecntblc = idx = dep[<span class="number">0</span>] = ansnow = top = <span class="number">0</span> ;</span><br><span class="line">truedfs(root,<span class="number">0</span>) ;</span><br><span class="line">truecntblc ++ ;</span><br><span class="line">true<span class="keyword">while</span> (top) belong[sta[top--]] = cntblc ;</span><br><span class="line">trueST() ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,<span class="keyword">m</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(u) , <span class="keyword">read</span>(v) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (belong[u] &gt; belong[v]) std::swap(u,v) ;</span><br><span class="line">truetrue<span class="string">q[i]</span>.u = u , <span class="string">q[i]</span>.v= v ;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="string">q[i]</span>.a) , <span class="keyword">read</span>(<span class="string">q[i]</span>.b) ;</span><br><span class="line">truetrue<span class="string">q[i]</span>.id = i ;</span><br><span class="line">true&#125;</span><br><span class="line">truestd::<span class="keyword">sort</span>(<span class="keyword">q</span>+<span class="number">1</span>,<span class="keyword">q</span>+<span class="keyword">m</span>+<span class="number">1</span>) ;</span><br><span class="line">truelca = LCA(<span class="string">q[1]</span>.u,<span class="string">q[1]</span>.v) ;</span><br><span class="line">trueMoveTo(<span class="string">q[1]</span>.u,<span class="string">q[1]</span>.v) ;</span><br><span class="line">trueGetAns(<span class="number">1</span>,lca) ;</span><br><span class="line">trueRep (i,<span class="number">2</span>,<span class="keyword">m</span>) &#123;</span><br><span class="line">truetrueMoveTo(<span class="string">q[i-1]</span>.u,<span class="string">q[i]</span>.u) ;</span><br><span class="line">truetrueMoveTo(<span class="string">q[i-1]</span>.v,<span class="string">q[i]</span>.v) ;</span><br><span class="line">truetruelca = LCA(<span class="string">q[i]</span>.u,<span class="string">q[i]</span>.v) ;</span><br><span class="line">truetrueGetAns(i,lca) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,<span class="keyword">m</span>) <span class="keyword">printf</span>(<span class="string">"<span class="variable">%d</span>\n"</span>, ans[i]) ;</span><br><span class="line">true<span class="comment">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="comment">#else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="comment">#endif</span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3258: 秘密任务]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/23/bzoj3258/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>这题描述很复杂 .. 就不概括了</p>
<p>Alice听说在一片神奇的大陆MagicLand，有一个古老的传说……<br> 很久很久以前，那个时候 MagicStates共和国刚刚成立。 反对新政府的势力虽已被镇压，但仍然在暗地活动。这一次，情报局得到了一个令人震惊的消息，被软禁在首都府邸中的Frank ——著名的反对派领袖，秘密逃出首都，去往反对派的大本营。根据相关的情报，Frank计划通过城市之间 发达的高速公路，经过最短的路程抵达目的地。不妨将 MagicStates共和国简化为由N个城市,M条高速公路构成的连通的无向图，首都为城市1，反对派的大本营为城市N。<br>每条高速公路连接两个不同的城市，且路程是已知的。而Frank选择了一条从城市1到城市N的最短路径作为他的逃跑路线。为了阻止Frank，共和国总统决定在某些城市的高速公路的出入口设立检查 点，在Frank经过检查点时将他逮捕。<br>举例来说，如果有一条高速公路连接城市u和城市v，在这条公路的城市u或城市v的出入口设立检查点，那么Frank经过高速公路时就会被发现。特别的是，由于城市N实际上处在反对派的控制下，所以不能在城市N设立检查点。</p>
<p>然而在任何城市设立检查点都需要一定的费用。更具体的，若在城市 u设立k个检查点，就要花费 Au乘以k的代价，其中Au是城市u的相关参数。值得注意的是，这个代价与这k个检查点具体设在哪些公路的出入口无关,于是，总统责令情报局拟定一个方案，花费最小的代价使得无论Frank选择哪条最短路线，都会在（除城市N以外）某个城市的高速公路出入口被发现。读到这里，Alice很想知道阻止Frank所需要花费的最小代价，并且她还希 望知道最优方案是否是唯一的。只好再请你帮助她了。<br>注意，我们称两个方案不同当且仅当存在某城市k，两种方案中在城市 k的检查点的设置（而不仅是数目）是不同的。<br>注意，输入文件包含多组测试数据。</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3258" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>1&gt;首先,不考虑判定唯一解时,显然我们需要将$1\to n$的最短路网求出来,在这个最短路网上考虑.<br>很容易发现我们只需要求一个最小割就时第二问.其中边$(u,v)$边权为$min(A[u],A[v])$</p>
<p>2&gt;下面考虑怎样判断最小割是唯一的.<br>你真的只在想”最小割是否唯一”这个问题吗?那你就大错特错了<del>我会告诉你我考试的时候就一直这么想的吗?渣渣</del><br>“最小割是否唯一”这个问题解决的并不是全部.<br>思考这种情况一条边$(u,v)$,$A[u]=A[v]$,这时即使最小割唯一,但是因为我们实际设置检查点的时候既可以在$u$也可以在$v$,会导致解的不唯一.若最小割唯一,我们就可以再枚举一遍被割掉的边两端的$A$值是否相等即可.</p>
<h2 id="代码">代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;cstdio&gt;</span><br><span class="line">#define Rep(i,<span class="keyword">l</span>,r) <span class="keyword">for</span>(i=(<span class="keyword">l</span>);i&lt;=(r);i++)</span><br><span class="line">#define Rev(i,r,<span class="keyword">l</span>) <span class="keyword">for</span>(i=(r);i&gt;=(<span class="keyword">l</span>);i--)</span><br><span class="line">int CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void <span class="keyword">read</span>(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">    <span class="keyword">ret</span> = NEG = 0 ; <span class="keyword">while</span> (CH=getchar() , CH&lt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (CH == '-') NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">ret</span> = <span class="keyword">ret</span>*10+CH-'0' , CH=getchar() , CH&gt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) <span class="keyword">ret</span> = -<span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void reads(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=getchar() , <span class="keyword">ret</span>&lt;'!') ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;'!') ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">include</span> &lt;cstring&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;deque&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">typedef long long ll ;</span><br><span class="line"></span><br><span class="line">#define  maxn  510LL</span><br><span class="line">#define  maxN  510LL</span><br><span class="line">#define  maxM  5010LL</span><br><span class="line">#define  <span class="keyword">infi</span>  0x3f3f3f3f3f3f3f3fLL</span><br><span class="line"></span><br><span class="line">struct FST &#123; int to , next ; ll flow ; &#125; <span class="keyword">e</span>[maxM&lt;&lt;1] , e0[maxM&lt;&lt;1] ;</span><br><span class="line">int star[maxN] , tote ;</span><br><span class="line">int star0[maxN] , tote0 ;</span><br><span class="line">inline void FST_init() &#123;</span><br><span class="line">truememset(star , 0 , sizeof star) ; tote = 1 ;</span><br><span class="line">truememset(star0 , 0 , sizeof star0) ; tote0 = 0 ;</span><br><span class="line">&#125;</span><br><span class="line">inline void AddEdge(int <span class="keyword">u</span> , int v , ll <span class="keyword">cap</span>) &#123;</span><br><span class="line">true<span class="keyword">e</span>[++tote].to = v ; <span class="keyword">e</span>[tote].flow = <span class="keyword">cap</span> ; <span class="keyword">e</span>[tote].next = star[<span class="keyword">u</span>] ; star[<span class="keyword">u</span>] = tote ;</span><br><span class="line">true<span class="keyword">e</span>[++tote].to = <span class="keyword">u</span> ; <span class="keyword">e</span>[tote].flow = 0 ; <span class="keyword">e</span>[tote].next = star[v] ; star[v] = tote ;</span><br><span class="line">&#125;</span><br><span class="line">inline void AddEdge0(int <span class="keyword">u</span> , int v , ll w) &#123;</span><br><span class="line">truee0[++tote0].to = v ; e0[tote0].flow = w ; e0[tote0]. next = star0[<span class="keyword">u</span>] ; star0[<span class="keyword">u</span>] = tote0 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define <span class="literal">min</span>(x,y)  std::<span class="literal">min</span>(x,y)</span><br><span class="line">int <span class="keyword">N</span> , S , T ;</span><br><span class="line">int <span class="keyword">h</span>[maxN] , vh[maxN] ;</span><br><span class="line"></span><br><span class="line">ll dfs(int <span class="keyword">u</span> , ll flowu) &#123;</span><br><span class="line">int p , tmp = <span class="keyword">h</span>[<span class="keyword">u</span>]+1 ;</span><br><span class="line">ll flow = 0 , flowv ;</span><br><span class="line">true<span class="keyword">if</span> (<span class="keyword">u</span> == T) <span class="keyword">return</span> flowu ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[<span class="keyword">u</span>] ; p ; p = <span class="keyword">e</span>[p].next) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="keyword">e</span>[p].flow &amp;&amp; (<span class="keyword">h</span>[<span class="keyword">e</span>[p].to]+1==<span class="keyword">h</span>[<span class="keyword">u</span>])) &#123;</span><br><span class="line">truetruetrueflowv = dfs(<span class="keyword">e</span>[p].to , <span class="literal">min</span>(flowu-flow , <span class="keyword">e</span>[p].flow)) ;</span><br><span class="line">truetruetrueflow += flowv ; <span class="keyword">e</span>[p].flow -= flowv ; <span class="keyword">e</span>[p^1].flow += flowv ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (flow==flowu || <span class="keyword">h</span>[S]==<span class="keyword">N</span>) <span class="keyword">return</span> flow ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">for</span> (p = star[<span class="keyword">u</span>] ; p ; p = <span class="keyword">e</span>[p].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="keyword">e</span>[p].flow) tmp = <span class="literal">min</span>(tmp , <span class="keyword">h</span>[<span class="keyword">e</span>[p].to]) ;</span><br><span class="line">true<span class="keyword">if</span> (--vh[<span class="keyword">h</span>[<span class="keyword">u</span>]] == 0) <span class="keyword">h</span>[S] = <span class="keyword">N</span> ;</span><br><span class="line">true<span class="keyword">else</span> ++ vh[<span class="keyword">h</span>[<span class="keyword">u</span>]=tmp+1] ;</span><br><span class="line">true<span class="keyword">return</span> flow ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll SAP() &#123;</span><br><span class="line">truell <span class="keyword">ret</span> = 0 ;</span><br><span class="line">truememset(vh , 0 , sizeof vh) ;</span><br><span class="line">truememset(<span class="keyword">h</span> , 0 , sizeof <span class="keyword">h</span>) ;</span><br><span class="line">truevh[S] = <span class="keyword">N</span> ;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">h</span>[S] &lt; <span class="keyword">N</span>) <span class="keyword">ret</span> += dfs(S , <span class="keyword">infi</span>) ;</span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Time ;</span><br><span class="line">ll A[maxn] = &#123;0&#125; ;</span><br><span class="line">ll dist[2][maxn] = &#123;0&#125; ;</span><br><span class="line">bool inq[maxn] = &#123;0&#125; ;</span><br><span class="line">bool chos[maxn] = &#123;0&#125; ;</span><br><span class="line">std::deque&lt;int&gt;q;</span><br><span class="line"></span><br><span class="line">void SPFA(int <span class="keyword">u</span> , int o) &#123;</span><br><span class="line">int p , v ;</span><br><span class="line">true#define <span class="keyword">dis</span>(<span class="keyword">u</span>)  dist[o][<span class="keyword">u</span>]</span><br><span class="line">true<span class="keyword">dis</span>(<span class="keyword">u</span>) = 0 ;</span><br><span class="line">trueq.<span class="keyword">clear</span>();</span><br><span class="line">trueq.push_back(<span class="keyword">u</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">truetrue<span class="keyword">u</span> = q.front() , q.pop_front() , inq[<span class="keyword">u</span>] = false ;</span><br><span class="line">truetrue<span class="keyword">for</span> (p=star0[<span class="keyword">u</span>];p;p=e0[p].next) &#123;</span><br><span class="line">truetruetruev = e0[p].to ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (<span class="keyword">dis</span>(v) &gt; <span class="keyword">dis</span>(<span class="keyword">u</span>)+e0[p].flow) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">dis</span>(v) = <span class="keyword">dis</span>(<span class="keyword">u</span>)+e0[p].flow ;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (!inq[v]) &#123;</span><br><span class="line">truetruetruetruetrueinq[v] = true ;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (!q.empty() &amp;&amp; <span class="keyword">dis</span>(v)&lt;<span class="keyword">dis</span>(q.front())) q.push_front(v) ;</span><br><span class="line">truetruetruetruetrue<span class="keyword">else</span> q.push_back(v) ;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="keyword">n</span> ;</span><br><span class="line">ll <span class="keyword">sum</span> , ans ;</span><br><span class="line">int vis[maxn] = &#123;0&#125; ;</span><br><span class="line">void dfss(int <span class="keyword">u</span>,int i) &#123;</span><br><span class="line">truevis[<span class="keyword">u</span>] = i+1 ;</span><br><span class="line">true<span class="keyword">for</span> (int p=star[<span class="keyword">u</span>];p;p=<span class="keyword">e</span>[p].next)</span><br><span class="line">        <span class="keyword">if</span>(!vis[<span class="keyword">e</span>[p].to] &amp;&amp; <span class="keyword">e</span>[p^i].flow)</span><br><span class="line">            dfss(<span class="keyword">e</span>[p].to,i) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool judge() &#123;</span><br><span class="line">int i , j , p ;</span><br><span class="line">true<span class="keyword">sum</span> = 0 ;</span><br><span class="line">truedfss(S,0) ;</span><br><span class="line">truedfss(T,1) ;</span><br><span class="line">trueRep (i,1,<span class="keyword">n</span>-1) <span class="keyword">if</span> (vis[i] == 1)</span><br><span class="line">true    <span class="keyword">for</span> (p=star[i];p;p=<span class="keyword">e</span>[p].next) &#123;</span><br><span class="line">truetruetruej = <span class="keyword">e</span>[p].to ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (!(p&amp;1) &amp;&amp; vis[<span class="keyword">e</span>[p].to]==2) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (A[i] == A[j]) <span class="keyword">return</span> false ;</span><br><span class="line">truetruetruetrue<span class="keyword">else</span> <span class="keyword">sum</span> += <span class="literal">min</span>(A[i],A[j]) ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true<span class="keyword">return</span> (<span class="keyword">sum</span> == ans) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int Time , <span class="keyword">u</span> , v , <span class="keyword">m</span> , i ;ll w ;</span><br><span class="line">true#define <span class="keyword">READ</span></span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefreopen(<span class="string">"secret.in" ,"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"secret.out","w"</span>,stdout) ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">read</span>(Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time --&gt; 0) &#123;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">n</span>) , <span class="keyword">read</span>(<span class="keyword">m</span>) ;</span><br><span class="line">truetrueFST_init() ;</span><br><span class="line">truetrueRep (i,1,<span class="keyword">n</span>-1) <span class="keyword">read</span>(A[i]) ;</span><br><span class="line">truetrueA[<span class="keyword">n</span>] = <span class="keyword">infi</span> ;</span><br><span class="line">truetruememset(dist , 0x3f , sizeof dist) ;</span><br><span class="line">truetrueRep (i,1,<span class="keyword">m</span>) &#123;</span><br><span class="line">truetruetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) , <span class="keyword">read</span>(w) ;</span><br><span class="line">truetruetrueAddEdge0(<span class="keyword">u</span>,v,w) ;</span><br><span class="line">truetruetrueAddEdge0(v,<span class="keyword">u</span>,w) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueSPFA(1,0) ;</span><br><span class="line">truetrueSPFA(<span class="keyword">n</span>,1) ;</span><br><span class="line">truetrueRep (i,1,<span class="keyword">n</span>)</span><br><span class="line">truetruetrue<span class="keyword">if</span> (dist[0][i]+dist[1][i] == dist[0][<span class="keyword">n</span>]) chos[i] = true , vis[i] = false ;</span><br><span class="line">truetruetrue<span class="keyword">else</span> chos[i] = false ;</span><br><span class="line">truetrueRep (i,1,<span class="keyword">n</span>)</span><br><span class="line">truetrue    <span class="keyword">for</span> (int p=star0[i];p;p=e0[p].next) &#123;</span><br><span class="line">truetruetruetrueint j = e0[p].to ;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (chos[i] &amp;&amp; chos[j]) &#123;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (dist[0][i]+dist[1][j]+e0[p].flow == dist[0][<span class="keyword">n</span>]) &#123;</span><br><span class="line">truetruetruetruetruetrueAddEdge(i,j,<span class="literal">min</span>(A[i],A[j])) ;</span><br><span class="line">truetruetruetruetrue&#125;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrueS = 1 , T = <span class="keyword">N</span> = <span class="keyword">n</span> ;</span><br><span class="line">truetrueans = SAP() ;</span><br><span class="line">truetrue<span class="keyword">if</span> (judge()) printf(<span class="string">"Yes "</span>) ;</span><br><span class="line">truetrue<span class="keyword">else</span> printf(<span class="string">"No "</span>) ;</span><br><span class="line">truetrueprintf(<span class="string">"%lld\n"</span>, ans) ;</span><br><span class="line">true&#125;</span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true#<span class="keyword">else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">return</span> 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3257: 树的难题]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/23/bzoj3257/</url>
      <content type="html"><![CDATA[<p>明明想到了正解然后写跪一分没有 T_T<br>惨痛教训啊</p>
<a id="more"></a>
<h2 id="题意">题意</h2><p>给出一个无根树,树有N个点,边有权值,每个点都有颜色,是黑色,白色,<br>灰色这三种颜色之一.<br>删去若干条边使得树中不含有黑色结点或者含有至多一个白色节点.<br>计算最小删去边的边权和. </p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3257" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>作为一棵树就要有被树形dp的觉悟 = =<br>我们设置状态f[i][0],f[i][1],f[i][2]分别表示使以i为根的原树的子树中删去一些边后合法时,以i为根的当前子树中<br>1&gt;不含黑色节点<br>2&gt;含有1或0个白色节点<br>3&gt;不含有白色节点<br>再进行状态转移即可</p>
<p>这么好想的dp还实现不好真是醉了&gt;_&lt;</p>
<p>在具体实现时将节点的信息以dfs序存了起来,最后在外边for循环了一遍.<br>这么2333的方法请吐槽我SB</p>
<h2 id="代码">代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;cstdio&gt;</span><br><span class="line">#define Rep(i,<span class="keyword">l</span>,r) <span class="keyword">for</span>(i=(<span class="keyword">l</span>);i&lt;=(r);i++)</span><br><span class="line">#define Rev(i,r,<span class="keyword">l</span>) <span class="keyword">for</span>(i=(r);i&gt;=(<span class="keyword">l</span>);i--)</span><br><span class="line">int CH , NEG ;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void <span class="keyword">read</span>(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">    <span class="keyword">ret</span> = NEG = 0 ; <span class="keyword">while</span> (CH=getchar() , CH&lt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (CH == '-') NEG = true , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">ret</span> = <span class="keyword">ret</span>*10+CH-'0' , CH=getchar() , CH&gt;'!') ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) <span class="keyword">ret</span> = -<span class="keyword">ret</span> ;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename TP&gt;</span><br><span class="line">inline void reads(TP&amp; <span class="keyword">ret</span>) &#123;</span><br><span class="line">true<span class="keyword">while</span> (<span class="keyword">ret</span>=getchar() , <span class="keyword">ret</span>&lt;'!') ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;'!') ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">include</span> &lt;algorithm&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">typedef long long ll ;</span><br><span class="line"></span><br><span class="line">#define  maxn  300010LL</span><br><span class="line">#define  <span class="keyword">infi</span>  0x3f3f3f3f3f3f3f3fLL</span><br><span class="line"></span><br><span class="line">struct FST &#123; int to , next , len ; &#125; <span class="keyword">e</span>[maxn&lt;&lt;1] ;</span><br><span class="line">int star[maxn] = &#123;0&#125; , tote = 1 ;</span><br><span class="line">void FST_init() &#123; memset(star , 0 , sizeof star) ; tote = 1 ; &#125;</span><br><span class="line">void AddEdge(int <span class="keyword">u</span> , int v , int w) &#123;</span><br><span class="line">true<span class="keyword">e</span>[++tote].to = v ; <span class="keyword">e</span>[tote].len = w ; <span class="keyword">e</span>[tote].next = star[<span class="keyword">u</span>] ; star[<span class="keyword">u</span>] = tote ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int tot ;</span><br><span class="line">int dfn[maxn] = &#123;0&#125; ;</span><br><span class="line">int data[maxn] = &#123;0&#125; ;</span><br><span class="line">int col[maxn] = &#123;0&#125; ;</span><br><span class="line">int fa[maxn] = &#123;0&#125; ;</span><br><span class="line">ll len[maxn] = &#123;0&#125; ;</span><br><span class="line">ll f[maxn][3] = &#123;0&#125; ;</span><br><span class="line"></span><br><span class="line">void dfs(int <span class="keyword">u</span> , int ff , int <span class="keyword">l</span>) &#123;</span><br><span class="line">truedfn[<span class="keyword">u</span>] = ++tot ;</span><br><span class="line">truefa[dfn[<span class="keyword">u</span>]] = ff , col[dfn[<span class="keyword">u</span>]] = data[<span class="keyword">u</span>] , len[dfn[<span class="keyword">u</span>]] = <span class="keyword">l</span> ;</span><br><span class="line">trueff = 1 ;</span><br><span class="line">true<span class="keyword">for</span> (<span class="keyword">l</span>=star[<span class="keyword">u</span>];<span class="keyword">l</span>;<span class="keyword">l</span>=<span class="keyword">e</span>[<span class="keyword">l</span>].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (!dfn[<span class="keyword">e</span>[<span class="keyword">l</span>].to])</span><br><span class="line">truetruetrueff = 0 , dfs(<span class="keyword">e</span>[<span class="keyword">l</span>].to,dfn[<span class="keyword">u</span>],<span class="keyword">e</span>[<span class="keyword">l</span>].len) ;</span><br><span class="line">true<span class="keyword">if</span> (ff) &#123;</span><br><span class="line">truetrue<span class="comment">/*如果是叶子节点*/</span></span><br><span class="line">truetrue<span class="keyword">if</span> (col[dfn[<span class="keyword">u</span>]] == 0) &#123;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][0] = <span class="keyword">infi</span> ;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][1] = 0LL ;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][2] = 0LL ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col[dfn[<span class="keyword">u</span>]] == 1) &#123;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][0] = 0LL ;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][1] = 0LL ;</span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][2] = <span class="keyword">infi</span> ;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span></span><br><span class="line">truetruetruef[dfn[<span class="keyword">u</span>]][0] = f[dfn[<span class="keyword">u</span>]][1] = f[dfn[<span class="keyword">u</span>]][2] = 0LL ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int Time , <span class="keyword">n</span> , i , <span class="keyword">u</span> , v , w ;</span><br><span class="line">ll ans , tmp ;</span><br><span class="line">true#define <span class="keyword">READ</span></span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefreopen(<span class="string">"split.in" ,"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"split.out","w"</span>,stdout) ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">read</span>(Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time -- &gt;0) &#123;</span><br><span class="line">truetrueFST_init() ;</span><br><span class="line">truetrue<span class="keyword">read</span>(<span class="keyword">n</span>) ;</span><br><span class="line">truetrueRep (i,1,<span class="keyword">n</span>) <span class="keyword">read</span>(data[i]) ;</span><br><span class="line">truetrueRep (i,2,<span class="keyword">n</span>) &#123;</span><br><span class="line">truetruetrue<span class="keyword">read</span>(<span class="keyword">u</span>) , <span class="keyword">read</span>(v) , <span class="keyword">read</span>(w) ;</span><br><span class="line">truetruetrueAddEdge(<span class="keyword">u</span>,v,w) ;</span><br><span class="line">truetruetrueAddEdge(v,<span class="keyword">u</span>,w) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruetot = 0 ;</span><br><span class="line">truetruememset(f,0,sizeof f) ;</span><br><span class="line">truetruememset(dfn,0,sizeof dfn) ;</span><br><span class="line">truetruedfs(1,0,0) ;</span><br><span class="line">truetrueRev (v,<span class="keyword">n</span>,1) &#123;</span><br><span class="line">truetruetrue<span class="keyword">u</span> = fa[v] ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (col[<span class="keyword">u</span>] == 0) &#123;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][0] = <span class="keyword">infi</span> ;</span><br><span class="line">truetruetruetruetmp = std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][0]+len[v],std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][2],f[<span class="keyword">u</span>][2]+f[v][1]));</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][1] = std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][1]+len[v],tmp) ;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][2] += std::<span class="literal">min</span>(f[v][2],std::<span class="literal">min</span>(f[v][0]+len[v],f[v][1]+len[v])) ;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col[<span class="keyword">u</span>] == 1) &#123;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][0] += std::<span class="literal">min</span>(f[v][0],std::<span class="literal">min</span>(f[v][1]+len[v],f[v][2]+len[v])) ;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][1] += std::<span class="literal">min</span>(f[v][2],std::<span class="literal">min</span>(f[v][0]+len[v],f[v][1]+len[v])) ;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][2] = <span class="keyword">infi</span> ;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col[<span class="keyword">u</span>] == 2) &#123;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][0] += std::<span class="literal">min</span>(f[v][0],std::<span class="literal">min</span>(f[v][1]+len[v],f[v][2]+len[v])) ;</span><br><span class="line">truetruetruetruetmp = std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][0]+len[v],std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][2],f[<span class="keyword">u</span>][2]+f[v][1]));</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][1] = std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1]+f[v][1]+len[v],tmp) ;</span><br><span class="line">truetruetruetruef[<span class="keyword">u</span>][2] += std::<span class="literal">min</span>(f[v][2],std::<span class="literal">min</span>(f[v][0]+len[v],f[v][1]+len[v])) ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">u</span> = 1 ;</span><br><span class="line">truetrueans = std::<span class="literal">min</span>(f[<span class="keyword">u</span>][0],std::<span class="literal">min</span>(f[<span class="keyword">u</span>][1],f[<span class="keyword">u</span>][2])) ;</span><br><span class="line">truetrueprintf(<span class="string">"%lld\n"</span>, ans) ;</span><br><span class="line">true&#125;</span><br><span class="line">true#ifdef  <span class="keyword">READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true#<span class="keyword">else</span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true#endif</span><br><span class="line">true<span class="keyword">return</span> 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3166: [Heoi2013]Alo]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/22/bzoj3166/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>给定一个序列,选择一个区间,使得区间第二大的数与区间内其它的数字按位异或得到的结果的最大值最大.</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3166" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>我们求出将每一个数字作为第二大的数时,向左向右最远能扩展到多少.<br>再按照输入顺序给序列做可持久化Trie,这棵Trie表示每个数字二进制下每一位的0或1.<br>于是我们就根据可持久化数据结构的可减性找到任意一个区间的Trie的形态.<br>将每一个数在它所应属的区间的Trie树上求答案即可.<br>因为一个数与自己按位异或得到结果为0,所以第二大的数在这个区间内也没有影响.</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  55000LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxd  31LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> GEM &#123;</span><br><span class="line">true<span class="keyword">int</span> num , id ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> GEM&amp; b) <span class="keyword">const</span></span><br><span class="line">true&#123; <span class="keyword">return</span> num &lt; b.num ; &#125;</span><br><span class="line">&#125; a[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Trie &#123;</span><br><span class="line">trueTrie *c[<span class="number">2</span>] ;</span><br><span class="line">true<span class="keyword">int</span> sum ;</span><br><span class="line">&#125; nodes[maxn*<span class="number">80</span>] ;</span><br><span class="line">Trie *root[maxn] , *null ;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTrie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">trueroot[<span class="number">0</span>] = null = &amp;nodes[tot++] ;</span><br><span class="line">truenull-&gt;c[<span class="number">0</span>] = null-&gt;c[<span class="number">1</span>] = null ;</span><br><span class="line">truenull-&gt;sum = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Trie *rt1 , Trie *rt2 , <span class="keyword">int</span> num , <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">true*rt2 = *rt1 ; rt2-&gt;sum ++ ;</span><br><span class="line">true<span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">true<span class="keyword">if</span> ((num&gt;&gt;d)&amp;<span class="number">1</span>) &#123;</span><br><span class="line">truetruert2-&gt;c[<span class="number">1</span>] = &amp;nodes[tot++] ;</span><br><span class="line">truetrueInsert(rt1-&gt;c[<span class="number">1</span>] , rt2-&gt;c[<span class="number">1</span>] , num , d-<span class="number">1</span>) ;</span><br><span class="line">true&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruert2-&gt;c[<span class="number">0</span>] = &amp;nodes[tot++] ;</span><br><span class="line">truetrueInsert(rt1-&gt;c[<span class="number">0</span>] , rt2-&gt;c[<span class="number">0</span>] , num , d-<span class="number">1</span>) ;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(Trie *rt1 , Trie *rt2 , <span class="keyword">int</span> num , <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">int</span> p = (num&gt;&gt;d)&amp;<span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">if</span> (rt2-&gt;c[p^<span class="number">1</span>]-&gt;sum - rt1-&gt;c[p^<span class="number">1</span>]-&gt;sum)</span><br><span class="line">truetrue<span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;d)+Query(rt1-&gt;c[p^<span class="number">1</span>],rt2-&gt;c[p^<span class="number">1</span>],num,d-<span class="number">1</span>) ;</span><br><span class="line">true<span class="function"><span class="keyword">else</span> return <span class="title">Query</span><span class="params">(rt1-&gt;c[p],rt2-&gt;c[p],num,d-1)</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l1[maxn] , l2[maxn] , r1[maxn] , r2[maxn] , num[maxn] ;</span><br><span class="line"></span><br><span class="line">std::<span class="stl_container"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;</span>S ;</span><br><span class="line">std::<span class="stl_container"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;</span>::iterator left , right ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , ans ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetrueread(a[i].num) ,</span><br><span class="line">truetruenum[i] = a[i].num ,</span><br><span class="line">truetruea[i].id = i ;</span><br><span class="line">truestd::sort(a+<span class="number">1</span> , a+n+<span class="number">1</span>) ;</span><br><span class="line">trueS.insert(n+<span class="number">1</span>) ; S.insert(n+<span class="number">1</span>) ;</span><br><span class="line">trueS.insert(<span class="number">0</span>) ; S.insert(<span class="number">0</span>) ;</span><br><span class="line">trueRev (i,n,<span class="number">1</span>) &#123;</span><br><span class="line">truetrueS.insert(a[i].id) ;</span><br><span class="line">truetrueleft = right = S.lower_bound(a[i].id) ;</span><br><span class="line">truetrueleft -- ; l2[a[i].id] = *left ;</span><br><span class="line">truetrueleft -- ; l1[a[i].id] = *left ;</span><br><span class="line">truetrueright ++ ; r2[a[i].id] = *right ;</span><br><span class="line">truetrueright ++ ; r1[a[i].id] = *right ;</span><br><span class="line">true&#125;</span><br><span class="line">trueBuildTrie() ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetrueroot[i] = &amp;nodes[tot++] ,</span><br><span class="line">truetrueInsert(root[i-<span class="number">1</span>] , root[i] , num[i] , maxd) ;</span><br><span class="line">trueans = <span class="number">0</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (r2[i]==n &amp;&amp; l2[i]==<span class="number">0</span>) <span class="keyword">continue</span> ;</span><br><span class="line">truetrueans = std::max(ans , Query(root[l1[i]],root[r1[i]-<span class="number">1</span>],num[i],maxd)) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 2151: 种树]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/22/bzoj2151/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>　　n个点在一个环,选出k个点,使得点权和最大.点与点不能相邻.</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2151" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>这道题基本上同”[bzoj] 1150: [CTSC2007]数据备份Backup”</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  200010LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> NODE &#123;</span><br><span class="line">true<span class="keyword">int</span> id ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> NODE&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> a[id] &lt; a[b.id] ; &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k ;</span><br><span class="line">std::priority_queue&lt;NODE&gt;h ;</span><br><span class="line"><span class="keyword">int</span> pre[maxn] , back[maxn] ;<span class="comment">/*链表*/</span></span><br><span class="line"><span class="keyword">bool</span> del[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , ans , pos , front , rear ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) , read(k) ;</span><br><span class="line">true<span class="keyword">if</span> (k&gt;(n/<span class="number">2</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"Error!"</span>) ; <span class="keyword">goto</span> END ; &#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetrueread(a[i]) ,</span><br><span class="line">truetruepre[i] = i-<span class="number">1</span> , back[i] = i+<span class="number">1</span> ;</span><br><span class="line">truepre[<span class="number">1</span>] = n ; back[n] = <span class="number">1</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetrueh.push((NODE)&#123;i&#125;) ;</span><br><span class="line">trueans = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">while</span> (k --&gt; <span class="number">0</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">while</span> (del[h.top().id]) h.pop() ;</span><br><span class="line">truetruepos = h.top().id , h.pop() ;</span><br><span class="line">truetrueans += a[pos] ;</span><br><span class="line">truetruefront = pre[pos] ;</span><br><span class="line">truetruerear = back[pos] ;</span><br><span class="line">truetruedel[front] = <span class="keyword">true</span> ;</span><br><span class="line">truetruedel[rear] = <span class="keyword">true</span> ;</span><br><span class="line">truetruepre[pos] = pre[front] ;</span><br><span class="line">truetrueback[pos] = back[rear] ;</span><br><span class="line">truetrueback[pre[pos]] = pos ;</span><br><span class="line">truetruepre[back[pos]] = pos ;</span><br><span class="line">truetruea[pos] = a[front]+a[rear]-a[pos] ;</span><br><span class="line">truetrueh.push((NODE)&#123;pos&#125;) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans) ;</span><br><span class="line">trueEND : ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1150: [CTSC2007]数据备份Backup]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/22/bzoj1150/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>　　n个点在一条直线上的不同位置,选出k个点对,使得点对间的距离和最小.要求每个点最多属于一个点对.</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1150" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>贪心,但是显然每次选当前可选线段中的最短线段是不对的.<br>我们要考虑到把选择的线段”放回去”的过程.</p>
<ul>
<li>当我们选择一条线段时,与这条线段相邻的两条线段显然不能再选.</li>
<li>当我们要放回一条线段时,只有当它两侧的线段<strong>同时</strong>被选.</li>
</ul>
<p>当我们选择一条线段时,我们可以删除相邻的两条线断并添加一个新的元素:它的权值赋为左右两端线段权值之和减去当前线段权值.</p>
<p>这时当我们选择一个元素时就放弃了原来的线段而选择了它两侧的线段,线段数目加了一但是总权值增加了.<br>这样我们就可以用堆来实现了.</p>
<p>当然也可以用一些技巧用优先队列实现.</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> NODE &#123;</span><br><span class="line">true<span class="keyword">int</span> w , p , t ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> NODE&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; b.w ; &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  100010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  infi  2000000000LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k ;</span><br><span class="line">std::priority_queue&lt;NODE&gt;h ;</span><br><span class="line"><span class="keyword">int</span> a[maxn] ;</span><br><span class="line"><span class="keyword">int</span> pre[maxn] , back[maxn] , t[maxn] ;</span><br><span class="line"><span class="comment">/*链表*/</span></span><br><span class="line"><span class="keyword">bool</span> v[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , ans , pos , left , right ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) , read(k) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) read(a[i]) ;</span><br><span class="line">trueRev (i,n,<span class="number">2</span>) a[i] -= a[i-<span class="number">1</span>] ;</span><br><span class="line">truea[<span class="number">1</span>] = a[++n] = infi ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n) &#123;</span><br><span class="line">truetrueh.push((NODE)&#123;-a[i],i,<span class="number">1</span>&#125;) ;<span class="comment">/*大根堆所以-a[i]*/</span></span><br><span class="line">truetruepre[i] = i-<span class="number">1</span> , back[i] = i+<span class="number">1</span> , t[i] = <span class="number">1</span> ;</span><br><span class="line">true&#125;</span><br><span class="line">trueans = <span class="number">0</span> ;</span><br><span class="line">trueNODE x ;</span><br><span class="line">true<span class="keyword">while</span> (k --&gt; <span class="number">0</span>) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (x=h.top() ; v[x.p]||x.t!=t[x.p] ; h.pop(),x=h.top()) ;</span><br><span class="line">truetrueans -= x.w ;<span class="comment">/*更新答案*/</span></span><br><span class="line">truetruepos = x.p ;</span><br><span class="line">truetrueleft = pre[pos] , right = back[pos] ;</span><br><span class="line">truetrueback[left] = back[right] ; pre[back[right]] = left ;</span><br><span class="line">truetruev[pos] = v[right] = <span class="keyword">true</span> ;</span><br><span class="line">truetruea[left] += a[right]-a[pos] ;</span><br><span class="line">truetrueh.push((NODE)&#123;-a[left],left,++t[left]&#125;) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3572: [Hnoi2014]世界树]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/19/bzoj3572/</url>
      <content type="html"><![CDATA[<p>以前做过两道LCA单调性的题,但是不知道这玩意也叫做虚树<del>哪个混蛋起的第二个名搞的我还以为是是什么高级数据结构呢,弄得我出去听课都听不懂</del></p>
<a id="more"></a>
<h2 id="题意">题意</h2><p>给定一棵$n$个点的树,有$q$组询问,每一组给定了一些节点,问这些节点每个节点管辖多少个点<br>定义某个点被管辖当它到这个给定的点距离最小(距离相等取标号最小)</p>
<p>n&lt;=300000, q&lt;=300000,m[1]+m[2]+…+m[q]&lt;=300000<br>m[i]为给定节点的标号</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3572" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>手算一下我们发现节点个数约为$x=\sqrt{2n}$个,极限不到800个点.<br>显然我们不能在每一次询问做$O(n)$的dp,会T掉.<br>如果我们能够每一次询问时做$O(x)$的dp,问题就可以解决.</p>
<p>我们还是根据LCA单调性建出虚树,然后对虚树处理.<br>因为我们要做关于这棵虚树中的点的处理,那么需要预先求得每个节点子树大小.<br>将虚树中的节点按照dfs序排序,我们就可以两次循环处理出每一条虚树中的每个端点由哪一个节点来控制.<br>此时我们需要处理每一条边夹在两个端点间的那些节点的控制权<br>如果一条边的两个端点都由同一个节点来控制,显然中间这些节点都应该被相同的节点控制;<br>如果两端点由不同节点控制,则需要找到这两个控制点的路径中点在哪里,在中点两侧的节点由两个控制点分别控制.<br>第二种情况再仔细处理一下路径长度的奇偶性和标号大小即可.</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  300010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  300010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxk  20LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> FST &#123; <span class="keyword">int</span> to , next ; &#125; re[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> rstar[maxn] = &#123;<span class="number">0</span>&#125; , rtote = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddREdge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123; re[++rtote].to = v ; re[rtote].next = rstar[u] ; rstar[u] = rtote ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">int</span> Time ;</span><br><span class="line"><span class="keyword">int</span> q[maxn] , h[maxn] , hh[maxn] ;</span><br><span class="line"><span class="keyword">int</span> dep[maxn] , dfn[maxn] , size[maxn] ;</span><br><span class="line"><span class="keyword">int</span> dis[maxn] , ans[maxn] , poi[maxn] , w[maxn] ;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> fa[maxn][maxk] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> father[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs0</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">truedfn[u] = ++idx , dep[u] = dep[f]+<span class="number">1</span> , fa[u][<span class="number">0</span>] = f , size[u] = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (<span class="keyword">int</span> p = rstar[u] ; p ; p = re[p].next)</span><br><span class="line">truetrue<span class="keyword">if</span> (re[p].to != f) dfs0(re[p].to , u) , size[u] += size[re[p].to] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">true<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span> , i ; (<span class="number">1</span>&lt;&lt;k) &lt;= n ; k ++ )</span><br><span class="line">truetrue<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetruetruefa[i][k] = fa[fa[i][k-<span class="number">1</span>]][k-<span class="number">1</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> d)</span> </span>&#123;<span class="comment">//找到u的深度为d的祖先</span></span><br><span class="line">true<span class="keyword">int</span> i ;</span><br><span class="line">trueRev (i,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[fa[u][i]] &gt;= d)</span><br><span class="line">truetruetrueu = fa[u][i] ;</span><br><span class="line">true<span class="keyword">return</span> u ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (!u||!v) <span class="keyword">return</span> -<span class="number">1</span> ;</span><br><span class="line"><span class="keyword">int</span> k ;</span><br><span class="line">true<span class="keyword">if</span> (dep[u] &lt; dep[v]) std::swap(u,v) ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (dep[fa[u][k]] &gt;= dep[v])</span><br><span class="line">truetruetrueu = fa[u][k] ;</span><br><span class="line">true<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u ;</span><br><span class="line">trueRev (k,maxk-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (fa[u][k] != fa[v][k])</span><br><span class="line">truetruetrueu = fa[u][k] ,</span><br><span class="line">truetruetruev = fa[v][k] ;</span><br><span class="line">true<span class="keyword">return</span> fa[u][<span class="number">0</span>] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a , <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> dfn[a] &lt; dfn[b] ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sta[maxn] ;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn] ;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  infi  1000000LL</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , now , lca , u , v ;</span><br><span class="line">trueread(q[<span class="number">0</span>]) ;</span><br><span class="line">trueh[<span class="number">0</span>] = q[<span class="number">0</span>] ;</span><br><span class="line">truehh[<span class="number">0</span>] = <span class="number">0</span> ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,q[<span class="number">0</span>])</span><br><span class="line">truetrueread(q[i]) ,</span><br><span class="line">truetrueans[q[i]] = <span class="number">0</span> ,</span><br><span class="line">truetrueh[i] = q[i] ;</span><br><span class="line">truestd::sort(h+<span class="number">1</span> , h+h[<span class="number">0</span>]+<span class="number">1</span> , cmp) ;</span><br><span class="line">truesta[sta[<span class="number">0</span>]=<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">if</span> (h[<span class="number">1</span>] == <span class="number">1</span>) i = <span class="number">2</span> ;</span><br><span class="line">true<span class="keyword">else</span> i = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (;i&lt;=h[<span class="number">0</span>];i++) &#123;</span><br><span class="line">truetruenow = h[i] , lca = LCA(now , sta[sta[<span class="number">0</span>]]) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (lca == sta[sta[<span class="number">0</span>]]) &#123; sta[++sta[<span class="number">0</span>]] = now ; <span class="keyword">continue</span> ; &#125;</span><br><span class="line">truetrue<span class="keyword">while</span> (sta[<span class="number">0</span>]&gt;<span class="number">1</span> &amp;&amp; lca == LCA(now , sta[sta[<span class="number">0</span>]-<span class="number">1</span>])) &#123;</span><br><span class="line">truetruetruefather[sta[sta[<span class="number">0</span>]]] = sta[sta[<span class="number">0</span>]-<span class="number">1</span>] ;</span><br><span class="line">truetruetruehh[++hh[<span class="number">0</span>]] = sta[sta[<span class="number">0</span>]--] ;</span><br><span class="line">truetruetruedis[hh[hh[<span class="number">0</span>]]] = infi ;</span><br><span class="line">truetruetruelca = LCA(now , sta[sta[<span class="number">0</span>]]) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">if</span> (lca != sta[sta[<span class="number">0</span>]]) &#123;</span><br><span class="line">truetruetruefather[sta[sta[<span class="number">0</span>]]] = lca ;</span><br><span class="line">truetruetruehh[++hh[<span class="number">0</span>]] = sta[sta[<span class="number">0</span>]--] ;</span><br><span class="line">truetruetruedis[hh[hh[<span class="number">0</span>]]] = infi ;</span><br><span class="line">truetruetruesta[++sta[<span class="number">0</span>]] = lca ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruesta[++sta[<span class="number">0</span>]] = now ;</span><br><span class="line">true&#125;</span><br><span class="line">truehh[++hh[<span class="number">0</span>]] = sta[sta[<span class="number">0</span>]] ;</span><br><span class="line">truedis[hh[hh[<span class="number">0</span>]]] = infi ;</span><br><span class="line">true<span class="keyword">while</span> ( -- sta[<span class="number">0</span>])</span><br><span class="line">truetruefather[sta[sta[<span class="number">0</span>]+<span class="number">1</span>]] = sta[sta[<span class="number">0</span>]] ,</span><br><span class="line">truetruehh[++hh[<span class="number">0</span>]] = sta[sta[<span class="number">0</span>]] ,</span><br><span class="line">truetruedis[hh[hh[<span class="number">0</span>]]] = infi ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,h[<span class="number">0</span>])</span><br><span class="line">truetruedis[h[i]] = <span class="number">0</span> , poi[h[i]] = h[i] ;</span><br><span class="line">truestd::sort(hh+<span class="number">1</span> , hh+hh[<span class="number">0</span>]+<span class="number">1</span> , cmp) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,hh[<span class="number">0</span>]) &#123;</span><br><span class="line">truetruev=hh[i],u=father[v] ;</span><br><span class="line">truetruecnt[v] = size[v] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (i &gt; <span class="number">1</span>) w[v] = dep[v]-dep[u] ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRev (i,hh[<span class="number">0</span>],<span class="number">2</span>) &#123;</span><br><span class="line">truetruev=hh[i] , u=father[v] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (dis[u]&gt;dis[v]+w[v] || (dis[u]==dis[v]+w[v]&amp;&amp;poi[v]&lt;poi[u])) &#123;</span><br><span class="line">truetruetruedis[u] = dis[v]+w[v] ;</span><br><span class="line">truetruetruepoi[u] = poi[v] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">2</span>,hh[<span class="number">0</span>]) &#123;</span><br><span class="line">truetruev=hh[i],u=father[v] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (dis[v]&gt;dis[u]+w[v] || (dis[v]==dis[u]+w[v]&amp;&amp;poi[u]&lt;poi[v])) &#123;</span><br><span class="line">truetruetruedis[v] = dis[u]+w[v] ;</span><br><span class="line">truetruetruepoi[v] = poi[u] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line"><span class="keyword">int</span> m , sum , mid , tmp ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,hh[<span class="number">0</span>]) &#123;</span><br><span class="line">truetruev=hh[i],u=father[v] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (i==<span class="number">1</span>) ans[poi[v]] += n-size[v] ;</span><br><span class="line">truetrue<span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruem = find(v,dep[u]+<span class="number">1</span>),sum=size[m]-size[v] ;</span><br><span class="line">truetruetrue<span class="comment">/*sum为这条两个点间的所有点*/</span></span><br><span class="line">truetruetruecnt[u] -= size[m] ;</span><br><span class="line">truetruetrue<span class="comment">/*下面谈谈分配问题*/</span></span><br><span class="line">truetruetrue<span class="keyword">if</span> (poi[u] == poi[v]) ans[poi[v]] += sum ;</span><br><span class="line">truetruetrue<span class="comment">/*两端点被同一点控制直接加上*/</span></span><br><span class="line">truetruetrue<span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetrue<span class="comment">/*否则判断中间位置在哪里,然后分配到两个不同的控制点*/</span></span><br><span class="line">truetruetruetruemid = dep[v]-((dis[u]+dis[v]+w[v])/<span class="number">2</span>-dis[v]) ;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (((dis[u]+dis[v]+w[v])%<span class="number">2</span>==<span class="number">0</span>)&amp;&amp;poi[v]&gt;poi[u])++mid ;</span><br><span class="line">truetruetruetruetmp = size[find(v,mid)]-size[v] ;</span><br><span class="line">truetruetruetrueans[poi[v]] += tmp ;</span><br><span class="line">truetruetruetrueans[poi[u]] += sum-tmp ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">1</span>,hh[<span class="number">0</span>])</span><br><span class="line">truetrueans[poi[hh[i]]] += cnt[hh[i]] ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,q[<span class="number">0</span>])</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[q[i]]) ;</span><br><span class="line">true<span class="built_in">puts</span>(<span class="string">""</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , u , v ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">trueRep (i,<span class="number">2</span>,n)</span><br><span class="line">truetrueread(u) , read(v) ,</span><br><span class="line">truetrueAddREdge(u,v) ,</span><br><span class="line">truetrueAddREdge(v,u) ;</span><br><span class="line">truedep[<span class="number">0</span>] = <span class="number">0</span> ;</span><br><span class="line">truedfs0(<span class="number">1</span>,<span class="number">0</span>) ;</span><br><span class="line">trueST() ;</span><br><span class="line">trueread(Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time --&gt; <span class="number">0</span>) Solve() ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 3193: [JLOI2013]地形生成]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/18/bzoj3193/</url>
      <content type="html"><![CDATA[<p>刚刚听说小米与微软合作,将要出小米4上的WIN10ROM,我想说,会有多少人主动去刷机呢?Orz</p>
<a id="more"></a>
<h2 id="题意">题意</h2><p>给定一些山,每座山都有一个高度height与限制limit,表示这座山的高度为height,这座山之前高度大于它的山的数量不能超过limit,求合法的标号序列数量和高度序列数量</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3193" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>　　对于第一问来说,高度较小的山放在哪里不会影响到高度较大的山(因为高度较大的山的只有对高度比他还要大的山的数目的限制).那么我们就按高度的从大到小来枚举山,每座山在摆放时,由于比它大的山已经被放好了,所以它此时的可选位置可以求出来.那么第一问就是所有这些位置的乘积<br>　　第二问与第一问不同的是,可能会有两个合法的标号序列的高度序列相同.我们按高度排序后枚举的话,我们需要处理的就是高度相等的山.显然,完全相等的山,交换它们对高度序列无影响.我们可以将limit作为第二关键字来排序.我们不妨让关键值较小的山排在关键值较大的前面.这样每一座山的限制范围都有一个限制范围,用这个限制范围来做类似格子中每一行格子从1开始到limit的图形上从左下到右上角的方案数.</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn    1010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod  2011LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  inc(a,b) &#123;a+=b;<span class="keyword">if</span>(a&gt;=ansmod)a-=ansmod;&#125;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  mul(a,b) &#123;a*=b;a%=ansmod;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Mount &#123;</span><br><span class="line">true<span class="keyword">int</span> hei , lim ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Mount&amp; b) <span class="keyword">const</span></span><br><span class="line">true&#123; <span class="keyword">return</span> hei==b.hei ? lim&lt;b.lim : hei&gt;b.hei ; &#125;</span><br><span class="line">&#125; m[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , f[maxn] ;</span><br><span class="line"><span class="keyword">int</span> ans1 = <span class="number">1</span> , ans2 = <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , j , k , tmp , limit ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">trueRep (i,<span class="number">1</span>,n)</span><br><span class="line">truetrueread(m[i].hei) , read(m[i].lim) , m[i].lim -- ;</span><br><span class="line">truestd::sort(m+<span class="number">1</span> , m+n+<span class="number">1</span>) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i = j ) &#123;</span><br><span class="line">truetrue<span class="built_in">memset</span>(f , <span class="number">0</span> , <span class="keyword">sizeof</span> f) ;</span><br><span class="line">truetruetmp = <span class="number">0</span> ; f[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = i ; j&lt;=n &amp;&amp; m[j].hei==m[i].hei ; j ++ ) &#123;</span><br><span class="line">truetruetruelimit = std::min(m[j].lim,i-<span class="number">1</span>) ;</span><br><span class="line">truetruetruemul(ans1 , limit+j-i+<span class="number">1</span>) ;</span><br><span class="line">truetruetrueRep (k,<span class="number">1</span>,limit)</span><br><span class="line">truetruetruetrueinc(f[k] , f[k-<span class="number">1</span>]) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueRep (k,<span class="number">0</span>,limit)</span><br><span class="line">truetruetrueinc(tmp , f[k]) ;</span><br><span class="line">truetruemul(ans2,tmp) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans1 , ans2) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1034: [ZJOI2008]泡泡堂BNB]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/18/bzoj1034/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1034" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>与”田忌赛马”类似.<br>最弱或最强能赢则赢,不能赢则最弱打对方最强</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  100010LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">int</span> a[maxn] , b[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span>* a , <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> ret = <span class="number">0</span> , l1 , l2 , r1 , r2 ;</span><br><span class="line">truel1 = l2 = <span class="number">1</span> , r1 = r2 = n ;</span><br><span class="line">true<span class="keyword">while</span> (l1 &lt;= r1)</span><br><span class="line">true    <span class="keyword">if</span> (a[l1] &gt; b[l2]) ret += <span class="number">2</span> , l1 ++ , l2 ++ ;</span><br><span class="line">true    <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(a[r1] &gt; b[r2])</span> ret +</span>= <span class="number">2</span> , r1 -- , r2 -- ;</span><br><span class="line">true    <span class="keyword">else</span> ret += (a[l1]==b[r2]) , l1 ++ , r2 -- ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) read(a[i]) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) read(b[i]) ;</span><br><span class="line">truestd::sort(a+<span class="number">1</span> , a+n+<span class="number">1</span>) ;</span><br><span class="line">truestd::sort(b+<span class="number">1</span> , b+n+<span class="number">1</span>) ;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, calc(a , b) , <span class="number">2</span>*n-calc(b , a)) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1025: [SCOI2009]游戏]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/18/bzoj1025/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>对于一些长度为n的排列，将其作为一个置换，<br>那么可能有一个自置换的次数使其回到1,2,3,…,n的情况。<br>求对于所有能够回到1,2,3..,n的排列，不同的次数共有多少种。</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1025" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>移步<a href="http://blog.csdn.net/wyfcyx_forever/article/details/40211739" target="_blank" rel="external">守望、御神木的题解</a></p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  1010LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , p , pri[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> cps[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">ll f[maxn][maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetPri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truepri[<span class="number">0</span>] = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (!cps[i]) &#123;</span><br><span class="line">truetruetruepri[++pri[<span class="number">0</span>]] = i ;</span><br><span class="line">truetruetrue<span class="keyword">for</span> (j = i&lt;&lt;<span class="number">1</span> ; j &lt;= n ; j += i )</span><br><span class="line">truetruetruetruecps[j] = <span class="keyword">true</span> ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetruef[i][<span class="number">0</span>] = <span class="number">1</span> , f[<span class="number">0</span>][i] = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= pri[<span class="number">0</span>] ; j ++ ) &#123;</span><br><span class="line">truetruetruef[i][j] = f[i][j-<span class="number">1</span>] ;</span><br><span class="line">truetruetruep = pri[j] ;</span><br><span class="line">truetruetrue<span class="keyword">while</span> (i-p &gt;= <span class="number">0</span>)</span><br><span class="line">truetruetruetruef[i][j] += f[i-p][j-<span class="number">1</span>] , p *= pri[j] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n][pri[<span class="number">0</span>]]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">trueGetPri() ;</span><br><span class="line">truedp() ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1029: [JSOI2007]建筑抢修]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/18/bzoj1029/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p>小刚在玩JSOI提供的一个称之为“建筑抢修”的电脑游戏：经过了一场激烈的战斗，T部落消灭了所有z部落的入侵者。但是T部落的基地里已经有N个建筑设施受到了严重的损伤，如果不尽快修复的话，这些建筑设施将会完全毁坏。现在的情况是：T部落基地里只有一个修理工人，虽然他能瞬间到达任何一个建筑，但是修复每个建筑都需要一定的时间。同时，修理工人修理完一个建筑才能修理下一个建筑，不能同时修理多个建筑。如果某个建筑在一段时间之内没有完全修理完毕，这个建筑就报废了。你的任务是帮小刚合理的制订一个修理顺序，以抢修尽可能多的建筑</p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1029" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>如果能修则修，如果不能修就用已用时间的最长时间判断是否可以更优</p>
<p>这个贪心可以用拟阵来证明,但是懒得写了.<br>拟阵的用法可以看《算法导论》或刘雨辰的集训队论文《对拟阵的初步研究》</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  150010LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> NODE &#123;</span><br><span class="line">true<span class="keyword">int</span> t1 , t2 ;</span><br><span class="line">true<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> NODE&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> t2 &lt; b.t2 ; &#125;</span><br><span class="line">&#125; a[maxn] ;</span><br><span class="line"></span><br><span class="line">std::priority_queue&lt;<span class="keyword">int</span>&gt;q ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , i , used ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrueread(a[i].t1) , read(a[i].t2) ;</span><br><span class="line">truestd::sort(a+<span class="number">1</span> , a+n+<span class="number">1</span>) ;</span><br><span class="line">trueused = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (used+a[i].t1 &lt;= a[i].t2)</span><br><span class="line">truetruetrueq.push(a[i].t1) , used += a[i].t1 ;</span><br><span class="line">truetrue<span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(a[i].t1&lt;q.top()</span> &amp;&amp; used+a[i].t1-q.<span class="title">top</span><span class="params">()</span> &lt;</span>= a[i].t2)</span><br><span class="line">truetruetrueused += a[i].t1-q.top() , q.pop() , q.push(a[i].t1) ;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q.size()) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[CF] 336E Vasily the Bear and Painting Square]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/16/CF336E/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　最近老师考到了这道题,这里写一下这道题比较麻烦的思路<br><a id="more"></a></p>
<p>当$n=0$时有如下图像<br><img src="http://espresso.codeforces.com/1275b8f2c037da0c2d51f5e3a1e2bbfcb6087b2f.png" alt=""><br>当$n=1$时有如下图像<br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1eq7jj2w4zcj20g40c0mxm.jpg" alt=""><br>当$n=2$时有如下图像<br><img src="http://espresso.codeforces.com/cc53ab2374d206913fa5430d0c5c5d6831cd86f9.png" alt=""></p>
<p>题目要求对定的$n$的图像,染k个三角形(并不要求染最小的三角形),求染色方案数.<br>需要注意的是:即使染色完毕后结果图案相同,若某一步染的三角形不相同也算是不同的两种方案.</p>
<p><a href="http://codeforces.com/problemset/problem/336/E" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>可以发现染色是可以分层次的.<br>我们把$n$的图像分为$n$层,最内层为$0$,则可以一层一层向外染色.<br>如果想对小三角形染色,是与上一层及以内是否染过色无关的.<br>如果想对大三角形染色,我们只需要判断上一层及以内的一个染色方案中,某一象限内是否染过色即可.<br>我们画出图来分析<br><img src="http://ww2.sinaimg.cn/large/eb060c3ejw1eq7k5ziah1j20g40c0ta8.jpg" alt=""><br>我们发现在划分为$n$层后层与层之间分为两层更加合适.<br>上图中从第$i$层到第$i+0.5$层的转移很简单,并不需要判断前$i$层之内某一象限是否被染过色(只有①,②,③,④可选)<br>重点是第$i+0.5$层到第$i+1$层<br>在这一层中我们可以选择</p>
<ol>
<li>像⑥,⑦,⑧这样的小三角形</li>
<li>像⑤⑥,⑦⑧这样两个三角形拼接起来的中等大小的三角形</li>
<li>像第一象限和第二象限拼在一起的<del>超级</del>大三角形</li>
</ol>
<p>于是按照这个思路我们可以求得层与层之间的转移<br>在从$i=0$开始循环一边,用已经求得的转移来转移,就可以求到大小为$n$的图,染$k$个三角形的方案数.</p>
<p>那么,题目说<code>若某一步染的三角形不相同也算是不同</code>,其实答案乘以$k!$就好了么.</p>
<p>好吧说这么多实现起来还是照样复杂…几乎都是抄的代码了 23333333</p>
<p>stO zhonghaoxi</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  ansmod  = <span class="number">1000000007</span> ;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  inc(a,b) &#123;a+=b;<span class="keyword">if</span>(a&gt;=ansmod)a-=ansmod;&#125;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  210LL<span class="comment">//n</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxk  210LL<span class="comment">//k</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxs  16LL<span class="comment">//四位01状态</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxq  5LL<span class="comment">//四个象限</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxt  10LL<span class="comment">//一次转移最多增加8个三角形</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N , K ;</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">16</span>][<span class="number">10</span>][<span class="number">16</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">5</span>][<span class="number">10</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">16</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">401</span>][<span class="number">210</span>][<span class="number">16</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">16</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们把第i层到第i+1层拆为两个步骤</span></span><br><span class="line"><span class="comment">//即从第i层转移到第i+0.5层(立放到平放)和第i+0.5层到i+1层(平放到立放)</span></span><br><span class="line"><span class="comment">//g[原始状态][增加几个三角形][到达目标状态]的方案数</span></span><br><span class="line"><span class="comment">//h[前i个象限][增加了几个三角形][第i*2个三角形是否使用][第1个三角形是否使用][此时的状态]</span></span><br><span class="line"><span class="comment">//(第i*2个也就是前i个象限中的最后一个三角形)</span></span><br><span class="line"><span class="comment">//h是用来求g的</span></span><br><span class="line"><span class="comment">//求得g后可以用来求f</span></span><br><span class="line"><span class="comment">//最后要乘k的阶乘,因为染色方案结果相同,顺序不同也算不同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i , j , k , A , B , use , last , first , now1 , now2 , cnt , can , Time , ans ;</span><br><span class="line"><span class="keyword">int</span> col[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueRep (A,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) &#123;</span><br><span class="line">truetruenum[B=A] = <span class="number">0</span> ;</span><br><span class="line">truetrue<span class="keyword">while</span> (B) num[A]+=(B&amp;<span class="number">1</span>) , B&gt;&gt;=<span class="number">1</span> ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (A,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) &#123;</span><br><span class="line">truetrue<span class="built_in">memset</span>(h , <span class="number">0</span> , <span class="keyword">sizeof</span> h) ;</span><br><span class="line">truetrueh[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][A]=h[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][A|<span class="number">1</span>]=h[<span class="number">1</span>][<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>][A|<span class="number">1</span>]=h[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][A|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">truetrue<span class="keyword">if</span> (!(A&amp;<span class="number">1</span>)) h[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][A|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">truetrueRep (i,<span class="number">1</span>,<span class="number">3</span>) Rep (use,<span class="number">0</span>,<span class="number">8</span>) Rep (last,<span class="number">0</span>,<span class="number">1</span>) Rep (first,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">truetruetrueRep (B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) <span class="keyword">if</span> (h[i][use][last][first][B])</span><br><span class="line">truetruetruetrueRep (now1,<span class="number">0</span>,<span class="number">1</span>) Rep (now2,<span class="number">0</span>,<span class="number">1</span>) &#123;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (!now1 &amp;&amp; !now2 &amp;&amp; !((B&gt;&gt;i)&amp;<span class="number">1</span>))<span class="comment">//当前这个象限不使用三角形且这个象限本来就是空的</span></span><br><span class="line">truetruetruetruetruetrueinc(h[i+<span class="number">1</span>][use+<span class="number">1</span>][<span class="number">1</span>][first][B|(<span class="number">1</span>&lt;&lt;i)],h[i][use][last][first][B]);<span class="comment">//那就添上一个大三角形</span></span><br><span class="line">truetruetruetruetrueinc(h[i+<span class="number">1</span>][use+now1+now2][now2][first][B|((now1|now2)&lt;&lt;i)],h[i][use][last][first][B]) ;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (!last &amp;&amp; !now1)</span><br><span class="line">truetruetruetruetruetrueinc(h[i+<span class="number">1</span>][use+<span class="number">1</span>+now2][now2][first][B|(<span class="number">1</span>&lt;&lt;i)|(<span class="number">1</span>&lt;&lt;(i-<span class="number">1</span>))],h[i][use][last][first][B]);</span><br><span class="line">truetruetruetruetruetrue<span class="comment">//与上一个象限的三角形拼接成一个三角形添入</span></span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (!now1 &amp;&amp; !now2 &amp;&amp; !((B&gt;&gt;i)&amp;<span class="number">1</span>) &amp;&amp; !((B&gt;&gt;(i-<span class="number">1</span>))&amp;<span class="number">1</span>))</span><br><span class="line">truetruetruetruetruetrueinc(h[i+<span class="number">1</span>][use+<span class="number">1</span>][<span class="number">1</span>][first|(i==<span class="number">1</span>)][B|(<span class="number">1</span>&lt;&lt;i)|(<span class="number">1</span>&lt;&lt;(i-<span class="number">1</span>))],h[i][use][last][first][B]);</span><br><span class="line">truetruetruetruetruetrue<span class="comment">//如果两个相邻的象限都是空的,可以填一个很大的三角形 = =</span></span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetrueRep (use,<span class="number">0</span>,<span class="number">8</span>) Rep (B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetruetrueinc(h[<span class="number">4</span>][use+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][B|<span class="number">9</span>],h[<span class="number">4</span>][use][<span class="number">0</span>][<span class="number">0</span>][B]) ;</span><br><span class="line">truetrueRep (use,<span class="number">0</span>,<span class="number">8</span>) Rep (B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) <span class="keyword">if</span> (!(B&amp;<span class="number">1</span>)&amp;&amp;!(B&amp;<span class="number">8</span>))</span><br><span class="line">truetruetrueinc(h[<span class="number">4</span>][use+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][B|<span class="number">9</span>],h[<span class="number">4</span>][use][<span class="number">0</span>][<span class="number">0</span>][B]) ;</span><br><span class="line">truetrueRep (use,<span class="number">0</span>,<span class="number">8</span>) Rep (last,<span class="number">0</span>,<span class="number">1</span>) Rep (first,<span class="number">0</span>,<span class="number">1</span>) Rep (B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetruetrueinc(g[A][use][B],h[<span class="number">4</span>][use][last][first][B]) ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (A,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) Rep(B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>) &#123;</span><br><span class="line">truetruecol[<span class="number">0</span>]=col[<span class="number">1</span>]=col[<span class="number">2</span>]=col[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">truetruecnt = <span class="number">0</span> ;</span><br><span class="line">truetrueRep (i , <span class="number">0</span> , <span class="number">4</span>-<span class="number">1</span>)</span><br><span class="line">truetruetruecol[i] = ((A&gt;&gt;i)&amp;<span class="number">1</span>) , cnt += col[i] ;</span><br><span class="line">truetruecan = <span class="keyword">true</span> ;</span><br><span class="line">truetrueRep (i,<span class="number">0</span>,<span class="number">4</span>-<span class="number">1</span>) <span class="keyword">if</span> ((B&gt;&gt;i)&amp;<span class="number">1</span>) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (col[i] || col[(i+<span class="number">1</span>)%<span class="number">4</span>]) can = <span class="keyword">false</span> ;</span><br><span class="line">truetruetruecol[i] = col[(i+<span class="number">1</span>)%<span class="number">4</span>] = <span class="keyword">true</span> ;</span><br><span class="line">truetruetruecnt ++ ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">if</span> (!can) <span class="keyword">continue</span> ;</span><br><span class="line">truetrueK = <span class="number">0</span> ;</span><br><span class="line">truetrueRev (i,<span class="number">4</span>-<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">truetruetrueK = (K&lt;&lt;<span class="number">1</span>)|col[i] ;</span><br><span class="line">truetruef[<span class="number">0</span>][cnt][K] ++ ;</span><br><span class="line">true&#125;</span><br><span class="line">trueRep (i,<span class="number">0</span>,<span class="number">400</span>-<span class="number">1</span>) Rep (j,<span class="number">0</span>,<span class="number">200</span>) Rep (A,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetrue<span class="keyword">if</span> (f[i][j][A])</span><br><span class="line">truetruetrue<span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="comment">//从奇数转移到偶数,统计的形状是立起来的正方形</span></span><br><span class="line">truetruetruetrueRep (k,<span class="number">0</span>,<span class="number">8</span>)</span><br><span class="line">truetruetruetruetrue<span class="comment">//所以这里最多有八个小三角形</span></span><br><span class="line">truetruetruetruetrue<span class="comment">//但在转移时应该包括了两个三角形拼起来的情况</span></span><br><span class="line">truetruetruetruetruetrueRep (B,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetruetruetruetruetruetrueinc(f[i+<span class="number">1</span>][j+k][B],(<span class="keyword">long</span> <span class="keyword">long</span>)f[i][j][A]*g[A][k][B]%ansmod) ;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetrue<span class="comment">//从偶数转移到奇数,统计的形状是平方的正方形</span></span><br><span class="line">truetruetruetrueRep (k,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetruetruetruetrue<span class="comment">//所以只用判断四个角是否有三角形即可</span></span><br><span class="line">truetruetruetruetrueinc(f[i+<span class="number">1</span>][j+num[k]][A|k],f[i][j][A]) ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">trueread(Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time --&gt; <span class="number">0</span>) &#123;</span><br><span class="line">truetrueread(N) , read(K) ;</span><br><span class="line">truetrue<span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">truetrueRep (A,<span class="number">0</span>,<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line">truetruetrueinc(ans,f[<span class="number">2</span>*N][K][A]) ;</span><br><span class="line">truetrueRep (i,<span class="number">1</span>,K)</span><br><span class="line">truetruetrueans = (<span class="keyword">long</span> <span class="keyword">long</span>)ans*i%ansmod ;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[总结] 群论,Burnside引理,Polya计数]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/01/%E6%80%BB%E7%BB%93-%E7%BE%A4%E8%AE%BA/</url>
      <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>　　最近花了几天时间学习了关于群论的一些东西, 现在总结一下.</p>
<a id="more"></a>
<p>　　主要是通过看书<a href="http://www.hzbook.com/Books/6275.html" target="_blank" rel="external">《组合数学》</a>, 和参考博客<a href="http://www.cnblogs.com/DrunBee/" target="_blank" rel="external">DruuBee</a> Orz<br>　　这个总结会非常粗略, 我只会写一些必须的东西, 因为<del>画图太麻烦</del>时间仓促,所以例子会比较少,想要理解请多画图.</p>
<h1 id="置换群与对称群">置换群与对称群</h1><h2 id="置换">置换</h2><h3 id="定义">定义</h3><p>通俗一点地讲:<br>如果我们有一个正方形, 它的四个顶点从左上角按照顺时针依次为$A,B,C,D$,我们将它顺时针旋转九十度,那么现在从左上角按照顺时针依次为$D,A,B,C$.我们把这种位置的交换叫做<strong>置换</strong>.</p>
<p>专业一点的讲:<br>设$X$为有限集,为了方便我们取$X$为前$n$个正整数组成的集合(即$X=\lbrace 1,2,\dots,n\rbrace$).$X$的某一置换$i_1,i_2,\dots,i_n$可以看做$X$到其自身的一对一函数,其定义为</p>
<p>$$f:X\to X$$</p>
<p>其中</p>
<p>$$f(1)=i_1,f(2)=i_2,\dots,f(n)=i_n$$</p>
<p>我们可以将其表示为一种阵列的形式</p>
<p>$$<br>\begin{pmatrix}<br>1 &amp; 2 &amp; \cdots &amp; n \\<br>i_1 &amp; i_2 &amp; \cdots &amp; i_n<br>\end{pmatrix}<br>$$</p>
<p>在刚才的例子中我们将$A,B,C,D$写作$1,2,3,4$就可以得到如下置换</p>
<p>$$<br>\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\<br>4 &amp; 1 &amp; 2 &amp; 3<br>\end{pmatrix}<br>$$</p>
<h3 id="置换的合成">置换的合成</h3><p>我们规定一种关于集合的运算<strong>合成</strong>,用符号 $\circ$ 表示.<br>例如</p>
<p>$$<br>f=\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\<br>3 &amp; 2 &amp; 4 &amp; 1<br>\end{pmatrix}<br>$$<br>$$<br>g=\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\<br>2 &amp; 4 &amp; 3 &amp; 1<br>\end{pmatrix}<br>$$</p>
<p>我们可以自己模拟一下得到如下结果</p>
<p>$$<br>g\circ f=<br>\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\<br>3 &amp; 4 &amp; 1 &amp; 2<br>\end{pmatrix}<br>$$</p>
<p>$$<br>f\circ g=<br>\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 \\<br>2 &amp; 1 &amp; 4 &amp; 3<br>\end{pmatrix}<br>$$</p>
<p>上面的例子也说明了合成不满足<code>交换律</code></p>
<p>但是它是满足<code>结合律</code>的,即<br>$$(f\circ g)\circ h = f\circ(g\circ h)$$</p>
<h3 id="置换的幂">置换的幂</h3><p>我们通常用幂符号表示一个置换与它自身的合成:</p>
<p>$$<br>f^1=f,f^2=f\circ f,f^3=f\circ f \circ f,\cdots,f^k=f\circ f\circ f\circ \cdots\circ f(k个f)<br>$$</p>
<h3 id="恒等置换">恒等置换</h3><p><strong>恒等置换</strong>就是集合各个元素对应它本身的置换,我们记为$\iota$</p>
<p>$$<br>\iota=\begin{pmatrix}1 &amp; 2 &amp; \cdots &amp; n \\<br>1 &amp; 2 &amp; \cdots &amp; n<br>\end{pmatrix}<br>$$</p>
<p>显然</p>
<p>$$<br>\iota\circ f=f\circ\iota<br>$$</p>
<p>同时我们规定</p>
<p>$$<br>f^0=\iota<br>$$</p>
<h3 id="置换的逆">置换的逆</h3><p>我们定义<strong>置换的逆</strong>,这个脑补一下就会想到是怎么回事,我们记它为$f^{-1}$<br>再脑补一下可知</p>
<p>$$<br>f\circ f^{-1} = f^{-1}\circ f = \iota<br>$$</p>
<h2 id="置换群">置换群</h2><h3 id="定义-1">定义</h3><p>考虑一个多边形为正$n$边形</p>
<p>我们定义如下形式的置换为$\rho_n$:</p>
<p>$$<br>\rho_n=\begin{pmatrix}1 &amp; 2 &amp; \cdots &amp; n-1 &amp; n \\<br>2 &amp; 3 &amp; \cdots &amp; n &amp; 1<br>\end{pmatrix}<br>$$</p>
<p>考虑一个多边形为正$n$边形,我们将它的一个顶点放置到最高的位置,并将这个位置叫做<code>起点</code>.从起点开始顺时针方向标号为$1,2,\cdots,n-1,n$<br>对这个多边形进行置换$\rho_n$的话,从起点开始顺时针方向标号依次变为$2,3,\cdots,n,1$<br>再次脑补一下,我们相当于将这个$n$边形逆时针<strong>旋转</strong>了$\frac{2\pi}{n}$后将$2$放在了起点上<br>显然对于旋转来讲,我们有$n$种不同的旋转方案,即$\rho_n^1,\rho_n^2,\rho_n^3,\cdots,\rho_n^n$.其中$\rho_n^n$相当于没有旋转,则可知</p>
<p>$$<br>\rho_n^n=\rho_n^0=\iota<br>$$</p>
<p>我们将这些不同的置换放在一个集合里,这个集合就被称为<strong>置换群</strong>,我们将这个置换群记作$G$.</p>
<p>正$n$边形还有一种变换叫做<strong>反射</strong>(即以某条直线为轴翻转)<br>如正五边形以起点和起点对边中点所在直线为轴旋转的一个置换<br>$$<br>\tau=\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\<br>1 &amp; 5 &amp; 4 &amp; 3 &amp; 2<br>\end{pmatrix}<br>$$<br>显然类似这样的反射有五种,为了方便叙述,我们规定$\tau_i$表示将图形反射并将标号为$i$的点放在起点上.<br>此时<br>$$<br>G = \lbrace \rho_n^0=\iota,\rho_n^1,\rho_n^2,\rho_n^3,\rho_n^4,\tau_1,\tau_2,\tau_3,\tau_4,\tau_5 \rbrace<br>$$<br>其实变换并不止<code>旋转</code>与<code>反射</code>:<br>如果规定操作合理,你可以将两个角剪下来并交换位置,这也是一种变换,只不过一般不会出现这种情况.<br>而且,<code>旋转</code>与<code>反射</code>并不是一定存在的:<br>例如对于立体图形来就这两个操作就不好描述了,所以并不是所有的几何图形都有<code>旋转</code>与<code>反射</code>;而且有时会人为规定<code>反射</code>不可取或<code>旋转</code>不可取.</p>
<h3 id="性质">性质</h3><p>不加证明地给出置换群满足的三条性质:</p>
<ul>
<li><strong>合成运算的封闭性</strong>:对$G$中的每一个置换$f$与$g$,$f\circ g$也属于$G$.</li>
<li><strong>单位元</strong>:恒等置换$\iota$属于$G$</li>
<li><strong>逆元的封闭性</strong>:对$G$中的每一个置换$f$,它的逆元$f^{-1}$也属于$G$<br>可知上面正五边形的$G$满足这三条性质,因此上面的$G$是一个置换群</li>
</ul>
<h2 id="对称">对称</h2><h3 id="定义-2">定义</h3><p>设$\Omega$为一几何图形(也许是多维的),$\Omega$到它自身的一个运动或全等对称成为$\Omega$的一个<strong>对称</strong>.显然上面正五边形的$G$中每一个置换都是一个对称.</p>
<h2 id="对称群">对称群</h2><h3 id="定义-3">定义</h3><p>对一个集合的一些对称置换的<em>置换群</em> 叫做<strong>对称群</strong>.</p>
<h2 id="着色">着色</h2><h3 id="定义-4">定义</h3><p>$X$的一种着色是给$X$的每一个元素指定一种颜色的分配方案.<br>我们设一种着色方案为$c$,元素$i$的颜色表示为$c_i$.</p>
<h3 id="性质-1">性质</h3><p>我们考虑一个着色$c$与一个置换$f$的关系.<br>定义$f*c$为使得一个集合的着色$c$按照置换$f$转移.<br>例如<br>$$<br>c=\begin{pmatrix}a &amp; b &amp; c &amp; d &amp; e<br>\end{pmatrix}<br>$$<br>$$<br>f=\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\<br>1 &amp; 5 &amp; 4 &amp; 3 &amp; 2<br>\end{pmatrix}<br>$$<br>则<br>$$<br>f*c=\begin{pmatrix}a &amp; e &amp; d &amp; c &amp; b<br>\end{pmatrix}<br>$$<br>下面考虑$\circ$运算与$*$运算的关系<br>$$<br>(g\circ f)*c=g*(f*c)<br>$$</p>
<h2 id="着色集">着色集</h2><h3 id="定义-5">定义</h3><p>顾名思义,着色集即对一个集合一些着色方案的集合,记为$C$</p>
<h3 id="等价关系">等价关系</h3><p>如果$c_1$在$G$的某个置换作用下得到了$c_2$,我们就称$c_1$与$c_2$是等价的,记作<br>$$c_1 \sim c_2$$</p>
<h3 id="性质-2">性质</h3><p>对于$G$中的任意元$f$,$f*c$仍然属于$C$<br>关于等价关系有以下三条性质</p>
<ul>
<li><strong>自反性</strong>: 对于任意的$c$,$c\sim c$</li>
<li><strong>对称性</strong>: 如果$c_1\sim c_2$,则$c_2\sim c_1$</li>
<li><strong>传递性</strong>: 如果$c_1\sim c_2$,且$c_2\sim c_3$,则$c_1\sim c_3$</li>
</ul>
<p>注意等价将$C$中的着色划分成若干部分,使得所有等价的着色在同一个部分.</p>
<h1 id="Burnside定理">Burnside定理</h1><p>设$G$是作用于$X$上的置换群,$C$是对$X$的染色集,且$G$作用于$C$上,即任意$f$与$c$,有$$f*c\in C$$</p>
<h2 id="$G(c)$">$G(c)$</h2><p>对于一个着色$c$我们可以选择一些置换,使得这些置换中任意一个$f$有<br>$$f*c=c$$</p>
<p>我们把这个置换的集合记作$G(c)$,即使得着色$c$不变的$G$中所有置换的集合,也称之为着色$c$的<strong>稳定核</strong>.</p>
<h2 id="$C(f)$">$C(f)$</h2><p>对于一个置换$f$我们可以选择一些着色,使得这些着色中任意一个$c$有<br>$$f*c=c$$</p>
<p>我们把这个着色集合记作$C(f)$.</p>
<h2 id="定理1">定理1</h2><blockquote>
<p>对于每一种着色$c$,$G(c)$也是一个置换群,而且对于$G$中的任意置换$f$与$g$,$g*c=f*c$当且仅当$f^{-1}\circ g\in G$</p>
</blockquote>
<p>证明略</p>
<h2 id="推论1">推论1</h2><blockquote>
<p>$C$中与$c$等价的着色数等于$G$中置换的个数除以$c$的稳定核中的置换个数,即<br>$$<br>|\lbrace f*c:f\in G\rbrace|=\frac{|G|}{|G(c)|}<br>$$</p>
</blockquote>
<p>　</p>
<blockquote>
<p><strong>证明</strong><br>　　对于任意一个$G$中的置换$f$,若存在<br>$$<br>g*c=f*c<br>$$<br>则其中的$g$实际上为<br>$$<br>\lbrace f\circ h:h\in G(c)\rbrace<br>$$<br>易知上面集合中的置换个数实际上等于$|G(c)|$,从而对每一个$f$都有$|G(c)|$个置换作用在$c$上与$f$有相同效果.总共有$|G|$个置换,所以,与c等价的着色方案数<br>$$<br>|\lbrace f*c:f\in G\rbrace|<br>$$<br>等于<br>$$<br>\frac{|G|}{|G(c)|}<br>$$<br><strong>证毕.</strong></p>
</blockquote>
<h2 id="定理2(burnside定理)">定理2(burnside定理)</h2><blockquote>
<p>设$G$是$X$的置换群,而$C$是$X$中一个满足下面条件的着色集合:对于$G$中所有的$f$和$C$中的所有$c$都有$f*c$仍在$C$中,则$C$中非等价着色数$N(G,C)$由下式给出<br>$$<br>N(G,C)=\frac{1}{|G|}\sum_{f\in G}|C(f)|<br>$$<br>换言之$C$中的非等价着色数等于在$G$下保持不变的着色的平均数.</p>
</blockquote>
<p>　</p>
<blockquote>
<p><strong>证明</strong><br>首先计数使$f$保持$c$不变的对偶$(f,c)$的个数.<br>方法一<br>$$<br>\sum_{f\in G}|C(f)|<br>$$<br>方法二<br>$$<br>\sum_{c\in C}|G(c)|<br>$$<br>我们让这两个式子相等<br>$$<br>\sum_{f\in G}|C(f)|=\sum_{c\in C}|G(c)|<br>$$<br>此时根据<strong>推论1</strong>得<br>$$<br>|G(c)|=\frac{|G|}{(与c等价的着色数)}<br>$$<br>因此,<br>$$<br>\sum_{c\in C} = |G|\cdot\sum_{c\in C}\frac{1}{(与c等价的着色数)}<br>$$<br>由于同一等价类中中的每个着色对上式的贡献都为<br>$$<br>\frac{1}{(与c等价的着色数)}<br>$$<br>那么同一等价类中的所有着色对上式的贡献和为$1$<br>,所以上式等于<br>$$<br>N(G,C)\cdot|G|<br>$$<br>那么,由第一个等式可以得到<br>$$<br>\sum_{f\in G}|C(f)|=N(G,C)\cdot|G|<br>$$<br>方程两侧同时除以$|G|$,得到<br>$$<br>N(G,C)=\frac{1}{|G|}\sum_{f\in G}|C(f)|<br>$$<br><strong>证毕</strong></p>
</blockquote>
<h2 id="例子">例子</h2><blockquote>
<p>1.把$n$个不同的对象放在一个圆上,问有多少种放法(旋转后相同的放法视为同一种放法)?</p>
<blockquote>
<p>答:<br>$$<br>G=\lbrace\rho_n^0=\iota,\rho_n^1,\rho_n^2,\cdots,\rho_n^{n-1}\rbrace<br>$$<br>$$<br>N(G,C) = \frac{1}{n}(n!+0+0+\cdots+0)=(n-1)!<br>$$</p>
</blockquote>
<p>2.对红色与蓝色对正五边形进行染色,有多少种染色方法(旋转与翻转后相同视为同一种方法)?</p>
<blockquote>
<p>答:<br>$$<br>G=\lbrace\rho_5^0=\iota,\rho_5^1,\rho_5^2,\rho_5^3,\rho_5^4,\tau_5^1,\tau_5^2,\tau_5^3,\tau_5^4,\tau_5^5\rbrace<br>$$<br>$$<br>C(\rho_5^i)=\begin{cases}<br>32 &amp; i=0\\\\<br>2 &amp; i=1,2,3,4<br>\end{cases}<br>$$<br>$$<br>C(\tau_5^i) = 8 ,　i=1,2,3,4,5<br>$$<br>$$<br>N(G,C) = \frac{1}{10}(32+2+2+2+2+8+8+8+8+8)=8<br>$$</p>
</blockquote>
</blockquote>
<h1 id="Polya定理">Polya定理</h1><h2 id="循环">循环</h2><p>记形如<br>$$<br>\begin{pmatrix}<br>a_1 &amp; a_2 &amp; a_3 &amp; \cdots &amp; a_{n-1} &amp; a_n \\<br>a_2 &amp; a_3 &amp; a_4 &amp; \cdots &amp; a_n &amp; a_1<br>\end{pmatrix}<br>$$<br>的一个置换为循环<br>每个置换都可以写为若干个循环的乘积<br>如<br>$$<br>\begin{pmatrix}<br>1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 \\<br>3 &amp; 5 &amp; 6 &amp; 4 &amp; 2 &amp; 1<br>\end{pmatrix}=<br>\begin{pmatrix}<br>1 &amp; 3 &amp; 6<br>\end{pmatrix}<br>\begin{pmatrix}<br>2 &amp; 5<br>\end{pmatrix}<br>\begin{pmatrix}<br>4<br>\end{pmatrix}<br>$$</p>
<h2 id="Polya计数公式">Polya计数公式</h2><p>设函数$m(f)$为置换$f$的循环个数则有以下定理</p>
<blockquote>
<p>$$<br>N(G,C)=\frac{1}{|G|}\cdot\sum_{f\in G}k^{m(f)}<br>$$</p>
</blockquote>
<p>Polya定理在不同的题目中应用不同,下面以题目来说明.<br>以下题目解题思路参考博客<a href="http://www.cnblogs.com/DrunBee/" target="_blank" rel="external">DruuBee</a></p>
<h2 id="例子-1">例子</h2><blockquote>
<p><a href="http://zhangtianxiang.github.io/2015/01/01/poj2409/" target="_blank" rel="external">[poj] 2409: Let it Bead</a><br>用k种颜色对n个珠子构成的环上色, 旋转翻转后相同的只算一种, 求本质不同的着色方案数.</p>
<blockquote>
<p>对于表示翻转的置换的统计,请点入上面链接查看.<br>下面解释在统计表示旋转的置换时的公式<br>$$<br>\sum_{i=1}^{n}k^{gcd(n,i)}<br>$$<br>通俗的解释是:请手动画图找规律.<br>专业一点的解释:请打开黑书查看P252<br>下面引用<a href="http://www.cnblogs.com/DrunBee/archive/2012/09/10/2678378.html" target="_blank" rel="external">这里</a>的解释<br>假设起点在x，则x，x+i，x+2*i，……，x+k*i，……<br>假设在第t次，第一次回到起点，则x=(x+t*i)%n =&gt; t*i%n=0 =&gt; t=LCM(i,n)/i=n*i/GCD(n,i)/i=n/GCD(n,i)。<br>那么可以上n/t种颜色，即n/(n/GCD(n,i))种，所以旋转的着色方案有k^GCD(n,i)种。</p>
</blockquote>
<p><a href="http://zhangtianxiang.github.io/2015/01/01/poj2154/" target="_blank" rel="external">[poj] 2154: Color</a><br>用n种颜色对n个珠子构成的环上色, 旋转后相同的只算一种, 求本质不同的着色方案数</p>
<blockquote>
<p>分析请点入上面链接</p>
</blockquote>
<p><a href="http://zhangtianxiang.github.io/2015/01/01/poj2888/" target="_blank" rel="external">[poj] 2888: Magic Bracelet</a><br>对n个珠子构成的环染m种颜色, 并且规定一些颜色不能相邻. 旋转后相同算是同一种方案, 求本质不同的着色方案数.(m≤10,n≤109)</p>
<blockquote>
<p>分析请点入上面链接</p>
</blockquote>
</blockquote>
<p>这是三道例题(不要怪我懒= =),更多例题请参考博客<a href="http://www.cnblogs.com/DrunBee/category/412343.html" target="_blank" rel="external">DrunBee</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1022: [SHOI2008]小约翰的游戏John]]></title>
      <url>http://zhangtianxiang.github.io/2015/03/01/bzoj1022/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>有N堆石子，每堆石子有num[i]个，两个人轮流取，可以取任意一堆的任意个，但不能不去，谁取到最后一个谁输，求最后的赢家。</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1015" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>看到这道题很容易想到谁无法再取谁输的题，典型的Nim问题，而上述的题目是Anti-Nim问题。<br>在Anti-Nim问题中，先手必胜当且仅当：</p>
<ul>
<li>所有堆的石子数都为1且游戏的SG值为0；</li>
<li>有些堆的石子数大于1且游戏的SG值不为0。</li>
</ul>
<p>详见2009年国家集训队论文贾志豪论文<br>《组合游戏概述——浅谈SG游戏的若干拓展及变形》</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T , flag , SG , x , n ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(T) ;</span><br><span class="line">true<span class="keyword">while</span> (T -- ) &#123;</span><br><span class="line">truetrueread(n) ;</span><br><span class="line">truetrueflag = SG = <span class="number">0</span> ;</span><br><span class="line">truetrue<span class="keyword">while</span> (n -- ) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (read(x) , x &gt; <span class="number">1</span>) flag = <span class="number">1</span> ;</span><br><span class="line">truetruetrueSG ^= x ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="built_in">puts</span>(((flag&amp;&amp;SG)||(!flag&amp;&amp;!SG)) ? <span class="string">"John"</span> : <span class="string">"Brother"</span>) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[poj] 2888: Magic Bracelet]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/poj2888/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　对$n$个珠子构成的环染$m$种颜色, 并且规定一些颜色不能相邻. 旋转后相同算是同一种方案, 求本质不同的着色方案数.$(m\le 10 , n \le 10^9)$</p>
<a id="more"></a>
<p><a href="http://poj.org/problem?id=2888" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>　　如果没有限制我们可以用$Polya$计数来做 , 如果有限制就需要改写一下计算式子了.<br>　　当没有限制时</p>
<p>$$<br>\begin{aligned}<br>ans&amp;=\frac{1}{n}\cdot \sum_{i=1}^{n}m^{gcd(n,i)}\\<br>&amp;=\frac{1}{n}\cdot \sum_{d|n}\cdot m^{d}\cdot\varphi(\frac{n}{d})<br>\end{aligned}<br>$$</p>
<p>　　可以看到式子中的”$m^d$”部分为当$gcd(n,i)=d$所有保持不变的染色方案数, 我们设这一部分为一个函数$\psi(d)$<br>　　则上式变为<br>　　$$ans=\frac{1}{n}\cdot \sum_{d|n}\cdot \psi(d)\cdot\varphi(\frac{n}{d})$$</p>
<p>　　我们需要做的就是构造这个函数<br>　　我们之所以求出$gcd(n,i)$是因为一个位置在旋转$\pi/n*i$后, 它经过$\frac{n}{gcd(n,i)}$个置换之后会回到原来的位置, 那么也就相当于在一个边数为$gcd(n,i)$的多边形上的所有合法着色方案数<br>　　所以$\psi(d)$也就是相当于在一个边数为$d$的多边形上进行染色, 再加上限制后, 我们可以构造一个对颜色转移的邻接矩阵$g$, 若颜色$i$与颜色$j$可以相邻, 则矩阵的$g_{ij}=g_{ji}=1$. 我们求得矩阵$G=g^d$后, 矩阵的$G_{ii}$代表从某一位置开始, 这一位置染为颜色$i$的合法着色方案总数, 累加上所有$G_{ii}$即为$\psi(d)$</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sqr(x)  ((x)*(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rep(i,l,r) for (i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rev(i,l,r) for (i=r;i&gt;=l;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  32000LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  12LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod 9973LL</span></span><br><span class="line"></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> prime ;<span class="comment">/* 素数 */</span></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> factor ;<span class="comment">/* 约数 */</span></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> pfactor ;<span class="comment">/* 质因数 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> cps[maxn] = &#123;<span class="number">0</span>&#125; ;<span class="comment">/* 合数 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span> </span>&#123;<span class="comment">/* 得到所有质数 */</span></span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">trueprime.clear() ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; <span class="number">200</span> ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (!cps[i]) <span class="keyword">for</span> (j = i&lt;&lt;<span class="number">1</span> ; j &lt; maxn ; j += i)</span><br><span class="line">truetruetruecps[j] = <span class="keyword">true</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; maxn ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (!cps[i]) prime.push_back(i) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFactor</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* 得到x的所有约数 */</span></span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">truefactor.clear() ;</span><br><span class="line">truetmp = <span class="built_in">sqrt</span>(x) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= tmp ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (x%i == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruefactor.push_back(i) ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (i!=(x/i)) factor.push_back(x/i) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decps</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* 将x质因数分解 */</span></span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">truepfactor.clear() ;</span><br><span class="line">truetmp = <span class="built_in">sqrt</span>(x) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span> ; prime[i] &lt;= tmp ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (x%prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruepfactor.push_back(prime[i]) ;</span><br><span class="line">truetruetrue<span class="keyword">while</span> (x%prime[i] == <span class="number">0</span>) x /= prime[i] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true<span class="keyword">if</span> (x &gt; <span class="number">1</span>) pfactor.push_back(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CalcD</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span>&amp; mu)</span> </span>&#123;<span class="comment">/* 计算出由s表示的某一个不含平方因子的数,并求得\mu值 */</span></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span> , i ;</span><br><span class="line">true<span class="keyword">for</span> (i = mu = <span class="number">0</span> ; s ; s&gt;&gt;=<span class="number">1</span> , i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (s&amp;<span class="number">1</span>) ret *= pfactor[i] , mu ++ ;</span><br><span class="line">truemu = (mu&amp;<span class="number">1</span>) ? -<span class="number">1</span> : <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s , k , d , mu , ret = <span class="number">0</span> ;</span><br><span class="line">trueDecps(x) ;</span><br><span class="line">truek = pfactor.size() ;</span><br><span class="line">true<span class="keyword">for</span> (s = <span class="number">1</span> ; s &lt; (<span class="number">1</span>&lt;&lt;k) ; s ++ ) &#123;</span><br><span class="line">truetrued = CalcD(s , mu) ;</span><br><span class="line">truetrueret += x/d*mu ;</span><br><span class="line">true&#125;</span><br><span class="line">trueret = (x+ret)%ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b , <span class="keyword">int</span>&amp; d , <span class="keyword">int</span>&amp; x , <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (b) &#123; exgcd(b , a%b , d , y , x) ; y -= x*(a/b) ; &#125;</span><br><span class="line">true<span class="keyword">else</span> &#123; d = a ; x = <span class="number">1</span> ; y = <span class="number">0</span> ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Inverse</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x , y , z ;</span><br><span class="line">trueexgcd(a , m , z , x , y) ;</span><br><span class="line">true<span class="keyword">return</span> (x%m+m)%m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Mat &#123;</span><br><span class="line">true<span class="keyword">int</span> a[maxm][maxm] ;</span><br><span class="line">true<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(a , <span class="number">0</span> , <span class="keyword">sizeof</span> a) ; &#125;</span><br><span class="line">trueMat <span class="keyword">operator</span> * (<span class="keyword">const</span> Mat&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">truetrueMat ret ; ret.clear() ; <span class="keyword">int</span> i , j , k ;</span><br><span class="line">truetrueRep (k , <span class="number">1</span> , m) Rep (i , <span class="number">1</span> , m) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (a[i][k]) Rep (j , <span class="number">1</span> , m)</span><br><span class="line">truetruetruetrueret.a[i][j] += a[i][k]*b.a[k][j]%ansmod ,</span><br><span class="line">truetruetruetrueret.a[i][j] %= ansmod ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> ret ;</span><br><span class="line">true&#125;</span><br><span class="line">trueMat <span class="keyword">operator</span> *= (<span class="keyword">const</span> Mat&amp; b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>*b ; &#125;</span><br><span class="line">trueMat <span class="keyword">operator</span> ^ (<span class="keyword">int</span> p) <span class="keyword">const</span> &#123;</span><br><span class="line">truetrueMat ret , x = *<span class="keyword">this</span> ; <span class="keyword">int</span> i ;</span><br><span class="line">truetrueret.clear() ;</span><br><span class="line">truetrueRep (i , <span class="number">1</span> , m) ret.a[i][i] = <span class="number">1</span> ;</span><br><span class="line">truetrue<span class="keyword">for</span> (; p ; p&gt;&gt;=<span class="number">1</span> , x*=x) <span class="keyword">if</span> (p&amp;<span class="number">1</span>) ret*=x ;</span><br><span class="line">truetrue<span class="keyword">return</span> ret ;</span><br><span class="line">true&#125;</span><br><span class="line">trueMat <span class="keyword">operator</span> ^= (<span class="keyword">int</span> p) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>^p ; &#125;</span><br><span class="line">&#125; g , tmp ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , ret = <span class="number">0</span> ;</span><br><span class="line">truetmp = g^x ;</span><br><span class="line">trueRep (i , <span class="number">1</span> , m)</span><br><span class="line">truetrueret += tmp.a[i][i] ,</span><br><span class="line">truetrueret %= ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Burnside</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , ans = <span class="number">0</span> ;</span><br><span class="line">trueGetFactor(n) ;</span><br><span class="line">trueRep (i , <span class="number">0</span> , factor.size()-<span class="number">1</span>) &#123;</span><br><span class="line">truetrueans += Euler(n/factor[i])*Count(factor[i])%ansmod ;</span><br><span class="line">truetrueans %= ansmod ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> ans*Inverse(n,ansmod)%ansmod ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time , i , j , k ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueGetPrime() ;</span><br><span class="line">true<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">truetrue<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n , &amp;m , &amp;k) ;</span><br><span class="line">truetrueRep (i , <span class="number">1</span> , m) Rep(j , <span class="number">1</span> , m) g.a[i][j] = <span class="number">1</span> ;</span><br><span class="line">truetrue<span class="keyword">while</span> (k--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">truetruetrue<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i , &amp;j) ;</span><br><span class="line">truetruetrueg.a[i][j] = g.a[j][i] = <span class="number">0</span> ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Burnside()) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[hdu] 2865: Birthday Toy]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/hdu2865/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　$n$个小圆组成了正$n$边形, 中间有一个大圆, 用m种颜色来染所有圆. 有木棍相连的两个圆不能有相同的颜色, 旋转后相同视为相同的方案, 求本质不同的着色方案数</p>
<a id="more"></a>
<p><img src="http://acm.hdu.edu.cn/data/images/problem-2865-4.JPG" alt=""><br><img src="http://acm.hdu.edu.cn/data/images/problem-2865-5.JPG" alt=""><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2865" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>参考<a href="http://www.cnblogs.com/DrunBee/archive/2012/09/14/2684935.html" target="_blank" rel="external">【HDU】2865 Birthday Toy - DrunBee - 博客园</a></p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sqr(x)  ((x)*(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rep(i,l,r) for (i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rev(i,l,r) for (i=r;i&gt;=l;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  32000LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  3LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod 1000000007LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> prime ;</span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> factor ;</span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> pfactor ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> cps[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">    prime.clear() ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; <span class="number">200</span> ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!cps[i]) <span class="keyword">for</span> (j = i&lt;&lt;<span class="number">1</span> ; j &lt; maxn ; j += i)</span><br><span class="line">            cps[j] = <span class="keyword">true</span> ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; maxn ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!cps[i]) prime.push_back(i) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFactor</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">    factor.clear() ;</span><br><span class="line">    tmp = <span class="built_in">sqrt</span>(x) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= tmp ; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x%i == <span class="number">0</span>) &#123;</span><br><span class="line">            factor.push_back(i) ;</span><br><span class="line">            <span class="keyword">if</span> (i!=(x/i)) factor.push_back(x/i) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decps</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line">    pfactor.clear() ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; sqr(i) &lt;= x ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x%prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            pfactor.push_back(prime[i]) ;</span><br><span class="line">            <span class="keyword">while</span> (x%prime[i] == <span class="number">0</span>) x /= prime[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) pfactor.push_back(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CalcD</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span>&amp; mu)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span> ; <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (i = mu = <span class="number">0</span> ; s ; s&gt;&gt;=<span class="number">1</span> , i ++ )</span><br><span class="line">        <span class="keyword">if</span> (s&amp;<span class="number">1</span>) ret *= pfactor[i] , mu ++ ;</span><br><span class="line">    mu = (mu&amp;<span class="number">1</span>) ? -<span class="number">1</span> : <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s , k , mu , d , ret = <span class="number">0</span> ;</span><br><span class="line">    Decps(x) ;</span><br><span class="line">    k = pfactor.size() ;</span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">1</span> ; s &lt; (<span class="number">1</span>&lt;&lt;k) ; s ++ ) &#123;</span><br><span class="line">        d = CalcD(s , mu) ;</span><br><span class="line">        ret += x/d*mu ;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = (x+ret)%ansmod ;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a , ll b , ll&amp; d , ll&amp; x , ll&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b) &#123; exgcd(b , a%b , d , y , x) ; y -= x*(a/b) ; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; d = a ; x = <span class="number">1</span> ; y = <span class="number">0</span> ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Inverse</span><span class="params">(ll a , ll m)</span> </span>&#123;</span><br><span class="line">ll x , y , z ;</span><br><span class="line">    exgcd(a , m , z , x , y) ;</span><br><span class="line">    <span class="keyword">return</span> (x%m+m)%m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Mat &#123;</span><br><span class="line">    ll a[maxm][maxm] ;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(a , <span class="number">0</span> , <span class="keyword">sizeof</span> a) ; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span> ;</span><br><span class="line">        a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span> ;</span><br><span class="line">        a[<span class="number">1</span>][<span class="number">1</span>] = m-<span class="number">2</span> ;</span><br><span class="line">        a[<span class="number">2</span>][<span class="number">1</span>] = m-<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> * (<span class="keyword">const</span> Mat&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        Mat ret ; ret.clear() ; <span class="keyword">int</span> i , j , k ;</span><br><span class="line">        Rep (k , <span class="number">1</span> , <span class="number">2</span>) Rep (i , <span class="number">1</span> , <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][k]) Rep (j , <span class="number">1</span> , <span class="number">2</span>)</span><br><span class="line">                ret.a[i][j] += a[i][k]*b.a[k][j]%ansmod ,</span><br><span class="line">                ret.a[i][j] %= ansmod ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret ;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> *= (<span class="keyword">const</span> Mat&amp; b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>*b ; &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> ^ (<span class="keyword">int</span> p) <span class="keyword">const</span> &#123;</span><br><span class="line">        Mat ret , x = *<span class="keyword">this</span> ; <span class="keyword">int</span> i ;</span><br><span class="line">        ret.clear() ;</span><br><span class="line">        Rep (i , <span class="number">1</span> , <span class="number">2</span>) ret.a[i][i] = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">for</span> (; p ; p&gt;&gt;=<span class="number">1</span> , x*=x) <span class="keyword">if</span> (p&amp;<span class="number">1</span>) ret*=x ;</span><br><span class="line">        <span class="keyword">return</span> ret ;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> ^= (<span class="keyword">int</span> p) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>^p ; &#125;</span><br><span class="line">&#125; g ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Count</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> (ll)m*(m-<span class="number">1</span>)%ansmod ;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> (ll)m*(m-<span class="number">1</span>)%ansmod*(m-<span class="number">2</span>)%ansmod ;</span><br><span class="line"><span class="keyword">int</span> i ; ll ret = <span class="number">0</span> ;</span><br><span class="line">    g.build(m) ;</span><br><span class="line">    g ^= n-<span class="number">3</span> ;</span><br><span class="line">    ret = g.a[<span class="number">1</span>][<span class="number">1</span>]*m%ansmod*(m-<span class="number">1</span>)%ansmod*(m-<span class="number">2</span>)%ansmod ;</span><br><span class="line">    ret += g.a[<span class="number">2</span>][<span class="number">1</span>]*m%ansmod*(m-<span class="number">1</span>)%ansmod ;</span><br><span class="line">    <span class="keyword">return</span> ret%ansmod ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Burnside</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ; ll ret = <span class="number">0</span> ;</span><br><span class="line">    GetFactor(n) ;</span><br><span class="line">    Rep (i , <span class="number">0</span> , factor.size()-<span class="number">1</span>) &#123;</span><br><span class="line">        ret += Euler(n/factor[i])*Count(factor[i],m)%ansmod ;</span><br><span class="line">        ret %= ansmod ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret*Inverse(n,ansmod)%ansmod ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time , i , j , k ;</span><br><span class="line"><span class="comment">//    #define READ</span></span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        freopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">        freopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    GetPrime() ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n , &amp;m) != EOF)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Burnside(n,m-<span class="number">1</span>)*m%ansmod) ;</span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        fclose(stdin) ; fclose(stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">        getchar() ; getchar() ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[hdu] 4187: Alphabet Soup]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/hdu4187/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　一个圆上有$n$个点, 用$n$个角度($\pi=180000$)表示, 用$m$种颜色对n个点着色, 旋转后相同视为同一种着色方案, 求本质不同着色方案数</p>
<a id="more"></a>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4187" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>参考<a href="http://www.cnblogs.com/DrunBee/archive/2012/09/14/2684196.html" target="_blank" rel="external">【HDU】4187 Alphabet Soup - DrunBee - 博客园</a></p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sqr(x)  ((x)*(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rep(i,l,r) for (i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  Rev(i,l,r) for (i=r;i&gt;=l;i--)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  360010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  pi    180000LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod  100000007LL</span></span><br><span class="line"></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> factor ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> phi[maxn] = &#123;<span class="number">0</span>&#125; , str[maxn] , next[maxn] , data[maxn] ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPhi</span><span class="params">()</span> </span>&#123;<span class="comment">/* 得到所有phi */</span></span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">truephi[<span class="number">1</span>] = <span class="number">1</span> ;</span><br><span class="line">trueRep (i , <span class="number">2</span> , maxn-<span class="number">1</span>) <span class="keyword">if</span> (!phi[i]) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = i ; j &lt; maxn ; j += i) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (!phi[j]) phi[j] = j ;</span><br><span class="line">truetruetruephi[j] -= phi[j]/i ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFactor</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* 得到x的所有约数 */</span></span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">truefactor.clear() ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; sqr(i) &lt;= x ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (x%i == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruefactor.push_back(i) ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (sqr(i)!=x) factor.push_back(x/i) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a , ll b , ll&amp; d , ll&amp; x , ll&amp; y)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (b) &#123; exgcd(b , a%b , d , y , x) ; y -= x*(a/b) ; &#125;</span><br><span class="line">true<span class="keyword">else</span> &#123; d = a ; x = <span class="number">1</span> ; y = <span class="number">0</span> ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Inverse</span><span class="params">(ll a , ll m)</span> </span>&#123;</span><br><span class="line">ll x , y , z ;</span><br><span class="line">trueexgcd(a , m , z , x , y) ;</span><br><span class="line">true<span class="keyword">return</span> (x%m+m)%m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">POW</span><span class="params">(ll x , ll p)</span> </span>&#123;</span><br><span class="line">truell ret = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (x%=ansmod ; p ; p&gt;&gt;=<span class="number">1</span> , x*=x , x%=ansmod)</span><br><span class="line">truetrue<span class="keyword">if</span> (p&amp;<span class="number">1</span>) ret*=x , ret%=ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">truenext[<span class="number">0</span>] = j = -<span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; n ; )</span><br><span class="line">truetrue<span class="keyword">if</span> (j&lt;<span class="number">0</span> || str[i]==str[j]) next[++i] = ++j ;</span><br><span class="line">truetrue<span class="keyword">else</span> j = next[j] ;</span><br><span class="line">truei = n-next[n] ;</span><br><span class="line">true<span class="keyword">return</span> (n%i) ? n : i ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Burnside</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ; ll ret = <span class="number">0</span> ;</span><br><span class="line">trueGetFactor(n) ;</span><br><span class="line">trueRep (i , <span class="number">0</span> , factor.size()-<span class="number">1</span>)</span><br><span class="line">truetrueret += POW(m,factor[i])*phi[n/factor[i]] ,</span><br><span class="line">truetrueret %= ansmod ;</span><br><span class="line">true<span class="keyword">return</span> (ret*Inverse(n,ansmod))%ansmod ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n , m , i , len ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueGetPhi() ;</span><br><span class="line">true<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m , &amp;n) , m!=-<span class="number">1</span>||n!=-<span class="number">1</span>) &#123;</span><br><span class="line">truetrueRep (i , <span class="number">1</span> , n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i]) ;</span><br><span class="line">truetruestd::sort(data+<span class="number">1</span> , data+n+<span class="number">1</span>) ;</span><br><span class="line">truetrueRep (i , <span class="number">1</span> , n-<span class="number">1</span>)</span><br><span class="line">truetruetruestr[i] = data[i+<span class="number">1</span>]-data[i] ;</span><br><span class="line">truetruestr[<span class="number">0</span>] = pi*<span class="number">2</span>-data[n]+data[<span class="number">1</span>] ;</span><br><span class="line">truetruelen = Next(n) ;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Burnside(n/len, POW(m,len))) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1040: [ZJOI2008]骑士]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1040/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1040" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>环套树的一般做法是,枚举每条环上的边,将其删去后做树形dp</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  1000010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  1000010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> FST &#123; <span class="keyword">int</span> to , next ; &#125; e[maxm&lt;&lt;<span class="number">1</span>] ;</span><br><span class="line"><span class="keyword">int</span> star[maxn] = &#123;<span class="number">0</span>&#125; , tote = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">truee[++tote].to = v ; e[tote].next = star[u] ; star[u] = tote ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll val[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> done[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">ll f[maxn][<span class="number">2</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt1 , rt2 ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetCycle</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> edg)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* dfs找到环上的两点,并将这棵环套树中的节点标记为访问过 */</span></span><br><span class="line"><span class="keyword">int</span> v , p ;</span><br><span class="line">truedone[u] = <span class="keyword">true</span> ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[u] ; p ; p = e[p].next) &#123;</span><br><span class="line">truetruev = e[p].to ;</span><br><span class="line">truetrue<span class="keyword">if</span> (p == (edg^<span class="number">1</span>)) <span class="keyword">continue</span> ;</span><br><span class="line">truetrue<span class="keyword">if</span> (done[v]) &#123; <span class="keyword">if</span> (!rt1) rt1 = u , rt2 = v ; &#125;</span><br><span class="line">truetrue<span class="function"><span class="keyword">else</span> <span class="title">GetCycle</span><span class="params">(v , p)</span> </span>;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> v , p ;</span><br><span class="line">truevis[u] = <span class="keyword">true</span> ;</span><br><span class="line">truef[u][<span class="number">0</span>] = <span class="number">0</span> , f[u][<span class="number">1</span>] = val[u] ;</span><br><span class="line">true<span class="keyword">for</span> (p = star[u] ; p ; p = e[p].next) &#123;</span><br><span class="line">truetruev = e[p].to ;</span><br><span class="line">truetrue<span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">truetruetruedp(v) ;</span><br><span class="line">truetruetruef[u][<span class="number">0</span>] += max(f[v][<span class="number">0</span>] , f[v][<span class="number">1</span>]) ;</span><br><span class="line">truetruetruef[u][<span class="number">1</span>] += f[v][<span class="number">0</span>] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line">ll tmp , ans = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> u , v ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) ;</span><br><span class="line">true<span class="keyword">for</span> (u = <span class="number">1</span> ; u &lt;= n ; u ++ ) &#123;</span><br><span class="line">truetrueread(val[u]) , read(v) ;</span><br><span class="line">truetrueAddEdge(u , v) ;</span><br><span class="line">truetrueAddEdge(v , u) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">for</span> (u = <span class="number">1</span> ; u &lt;= n ; u ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (!done[u]) &#123;</span><br><span class="line">truetruetruert1 = rt2 = <span class="number">0</span> ;</span><br><span class="line">truetruetrueGetCycle(u , <span class="number">0</span>) ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (rt1 != <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="built_in">memset</span>(vis , <span class="keyword">false</span> , <span class="keyword">sizeof</span> vis) ;</span><br><span class="line">truetruetruetruedp(rt1) ;</span><br><span class="line">truetruetruetruetmp = f[rt1][<span class="number">0</span>] ;</span><br><span class="line">truetruetruetrue<span class="built_in">memset</span>(vis , <span class="keyword">false</span> , <span class="keyword">sizeof</span> vis) ;</span><br><span class="line">truetruetruetruedp(rt2) ;</span><br><span class="line">truetruetruetrueans += max(tmp , f[rt2][<span class="number">0</span>]) ;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetrue<span class="built_in">memset</span>(vis , <span class="keyword">false</span> , <span class="keyword">sizeof</span> vis) ;</span><br><span class="line">truetruetruetruedp(u) ; ans += max(f[u][<span class="number">1</span>] , f[u][<span class="number">0</span>]) ;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1013: [JSOI2008]球形空间产生器sphere]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1013/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　在$n$维空间里, 已知一个球球面上$n+1$个点的坐标, 求此球球心</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1013" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>二维平面上的圆上的点与圆心$(a,b)$的距离为</p>
<p>$$(x-a)^2+(y-b)^2=r^2$$</p>
<p>三维空间上的球上的点与球心$(a,b,c)$的距离为</p>
<p>$$(x-a)^2+(y-b)^2+(z-c)^2=r^2$$</p>
<p>在n维空间上的球上的点与球心$(a_1,a_2,a_3,…,a_n)$的距离为</p>
<p>$$\sum_{i=1}^{n}(x_i-a_i)^2=r^2$$</p>
<p>在二维平面上, 可由三点(不共线)确定一个圆;<br>在三维上四点(不共线)确定一个球;<br>在n维平面上, 则可由$n+1$个点(不共线)确定一个球.</p>
<p>相邻的两个点表示的方程</p>
<p>$$ \sum_{i=1}^{n}(x_i-a_i)^2 = r^2 $$</p>
<p>$$ \sum_{i=1}^{n}(y_i-a_i)^2 = r^2 $$</p>
<p>我们用上式减下式,可以得到</p>
<p>$$a_1(x_1-y_1)+a_2(x_2-y_2)+…+a_n(x_n-y_n)=\frac{ (x_1^2-y_1^2)+(x_2^2-y_2^2)+…+(x_n^2-y_n^2)}{2}$$</p>
<p>于是由$n+1$个方程组转化为了$n$个一维的方程组再用高斯消元法即可.</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  21LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  eps   1e-6F</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">double</span> f[maxn] , a[maxn][maxn] = &#123;<span class="number">0</span>&#125; , y ;</span><br><span class="line"><span class="keyword">int</span> i , j , k ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1013.in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1013.out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n ) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;f[i] ) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n ; j ++ ) &#123;</span><br><span class="line">truetruetrue<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;y ) ;</span><br><span class="line">truetruetruea[i][j] = <span class="number">2</span>*(y-f[j]) ;</span><br><span class="line">truetruetruea[i][n+<span class="number">1</span>] += y*y-f[j]*f[j] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true<span class="comment">/* Gauss */</span></span><br><span class="line">true<span class="keyword">int</span> now = <span class="number">1</span> , to ;</span><br><span class="line">true<span class="keyword">double</span> t ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (to = now ; to &lt;= n ; to ++ )</span><br><span class="line">truetruetrue<span class="keyword">if</span> (<span class="built_in">fabs</span>(a[to][i]) &gt; eps) <span class="keyword">break</span> ;</span><br><span class="line">truetrue<span class="keyword">if</span> (to &gt; n) <span class="keyword">continue</span> ;</span><br><span class="line">truetrue<span class="keyword">if</span> (to != now)</span><br><span class="line">truetruetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n+<span class="number">1</span> ; j ++ )</span><br><span class="line">truetruetruetruestd::swap(a[to][j] , a[now][j]) ;</span><br><span class="line">truetruet = a[now][i] ;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n+<span class="number">1</span> ; j ++ )</span><br><span class="line">truetruetruea[now][j] /= t ;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n ; j ++ ) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (j == now) <span class="keyword">continue</span> ;</span><br><span class="line">truetruetruet = a[j][i] ;</span><br><span class="line">truetruetrue<span class="keyword">for</span> (k = <span class="number">1</span> ; k &lt;= n+<span class="number">1</span> ; k ++ )</span><br><span class="line">truetruetruetruea[j][k] -= t*a[now][k];</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruenow ++ ;</span><br><span class="line">true&#125;</span><br><span class="line">true</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; n ; i ++ )</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%.3lf "</span>, a[i][n+<span class="number">1</span>] ) ;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, a[n][n+<span class="number">1</span>] ) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1044: [HAOI2008]木棍分割]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1044/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>有n根木棍, 第i根木棍的长度为Li,n根木棍依次连结了一起, 总共有n-1个连接处. 现在允许你最多砍断m个连接处, 砍完后n根木棍被分成了很多段,要求满足总长度最大的一段长度最小, 并且输出有多少种砍的方法使得总长度最大的一段长度最小. 并将结果mod 10007</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1044" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>设f[i][j]表示到第i个点,截取j个木棍且满足要求的方案数.<br>前缀和sum优化,那么i-&gt;j的长度就是sum[j]-sum[i-1]<br>f[i][j]中的j只和j-1有关，所以可以用滚存<br>每次k都要循环一遍,若sum[i]-sum[k]&lt;=ans,<br>那么sum[i-1]-sum[k]&lt;=ans(其中i-1&gt;k)(因为sum数组是前缀和,满足单调递增)<br>因此我们可以用类似于单调队列的方法，开一个后缀数组g.<br>如果sum[i]-sum[k]&lt;=ans,就把计算后的值赋到g[i]中去.<br>在以后每个小于i的数中,若i&gt;k,i就可以加上g数组<br><a href="http://blog.csdn.net/orpinex/article/details/7088191" target="_blank" rel="external">http://blog.csdn.net/orpinex/article/details/7088191</a></p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  50010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod  10007LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"><span class="keyword">int</span> maxv = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> a[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> s[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> g[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> p[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum , cnt ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line">truesum = <span class="number">0</span> , cnt = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class="line">truetruesum += a[i] ;</span><br><span class="line">truetrue<span class="keyword">if</span> (sum &gt; len) cnt ++ , sum = a[i] ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> cnt+<span class="number">1</span> &lt;= m ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L , R , M ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Bsearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">trueL = maxv-<span class="number">1</span> , R = s[n] ;</span><br><span class="line">true<span class="keyword">while</span> (R-L &gt; <span class="number">1</span>) &#123;</span><br><span class="line">truetrue<span class="comment">/* (L,R] */</span></span><br><span class="line">truetrueM = L+(R-L)/<span class="number">2</span> ;</span><br><span class="line">truetrue<span class="keyword">if</span> (Check(M)) R = M ;</span><br><span class="line">truetrue<span class="keyword">else</span> L = M ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> R ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , j , ret = <span class="number">0</span> , now = <span class="number">0</span> , last , pos = <span class="number">0</span> ;</span><br><span class="line">truef[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> , g[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ;i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">while</span> (s[i]-s[pos] &gt; len) pos ++ ;</span><br><span class="line">truetruep[i] = pos ,</span><br><span class="line">truetrueg[i] = <span class="number">1</span> ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= m ; i ++ ) &#123;</span><br><span class="line">truetruelast = now ; now ^= <span class="number">1</span> ;</span><br><span class="line">truetrue<span class="built_in">memset</span>(f[now] , <span class="number">0</span> , <span class="keyword">sizeof</span> f[now]) ;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n ; j ++ )</span><br><span class="line">truetruetruef[now][j] += (g[j-<span class="number">1</span>]-g[p[j]]+f[last][p[j]]) ,</span><br><span class="line">            f[now][j] %= ansmod ;</span><br><span class="line">truetrueret += f[now][n] ,</span><br><span class="line">truetrueret %= ansmod ;</span><br><span class="line">truetrueg[<span class="number">0</span>] = <span class="number">0</span> ;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= n ; j ++ )</span><br><span class="line">truetruetrueg[j] = g[j-<span class="number">1</span>]+f[now][j] ;</span><br><span class="line">    &#125;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i , ans ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">define</span> READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">"stick.in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"stick.out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(n) , read(m) , m ++ ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetrueread(a[i]) ,</span><br><span class="line">truetrues[i] = s[i-<span class="number">1</span>]+a[i] ,</span><br><span class="line">truetruemaxv = max(a[i] , maxv) ;</span><br><span class="line">trueans = Bsearch() ;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans , dp(ans)) ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1008: [HNOI2008]越狱]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1008/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　监狱有连续编号为$1…N$的$N$个房间，每个房间关押一个犯人，有$M$种宗教，每个犯人可能信仰其中一种。如果相邻房间的犯人的宗教相同，就可能发生越狱，求有多少种状态可能发生越狱</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1008" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>所有的可能宗教信仰方案为:$M^N$<br>相邻两个房间的人的宗教信仰不同的方案为:$M\cdot (M-1)^{N-1}$</p>
<p>$$ Ans=(M^N-M\cdot (M-1)^{N-1}) mod 100003$$</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  ansmod  100003LL</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"> </span><br><span class="line">ll n , m , ans ;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x , ll p)</span> </span>&#123;</span><br><span class="line">truell ret = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (x %= ansmod ; p ; x *= x , x %= ansmod , p &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">true    <span class="keyword">if</span> (p &amp; <span class="number">1</span>) ret *= x , ret %= ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//  #define READ</span></span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        freopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">        freopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;m , &amp;n) ;</span><br><span class="line">    m %= ansmod ;</span><br><span class="line">    ans = (<span class="built_in">pow</span>(m,n-<span class="number">1</span>)-<span class="built_in">pow</span>(m-<span class="number">1</span>,n-<span class="number">1</span>))%ansmod ;</span><br><span class="line">    ans *= m , ans %= ansmod ;</span><br><span class="line">    <span class="keyword">while</span> (ans &lt; <span class="number">0</span>) ans += ansmod ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans) ;</span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        fclose(stdin) ; fclose(stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">        getchar() ; getchar() ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1003: [ZJOI2006]物流运输trans]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1003/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　给定一有$m$个点的无向图$G$和一个时间$n$, 图中一些点在一些时间段是不能通过的, 你需要在每一天选择$1$至$m$一条路径$P$, 但是如果这条路径与前一天的$P$不同,则需要花费代价$K$.<br>　　设第$i$天路径$P$长度为$length_i$, 改变路径次数为$c$<br>最小化</p>
<p>$$c\cdot K+\sum_{i=1}^{n}{length_i}$$</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1003" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>　　设$len(i,j)$表示从第$i$天到第$j$天走相同的$P$时最短路径长度, $dp(i)$表示前$i$天的最小的$c\cdot K+\sum_{j=1}^{i}{length_j}$</p>
<p>$$    dp(i)=min \lbrace len(1,i)\cdot i,dp(j)+len(j+1,i)\cdotp(i-j)+K | 1\leq j&lt;i \rbrace   $$</p>
<p>这道题还需要注意的是一个点有可能有多个时间段不能通过</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  105LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxm  25LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxd  10010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  info  0x7f7f7f7f7f7f7f7fLL</span></span><br><span class="line"><span class="comment">/* maxd 坑死人 = = */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , m , u , v ;</span><br><span class="line">ll K ;</span><br><span class="line">ll f[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">ll length[maxn][maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line">ll <span class="built_in">map</span>[maxm][maxm] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">ll dis[maxm] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> inq[maxm] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> cont_time[maxd][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">bool</span> cont[maxm] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sizeque  100LL</span></span><br><span class="line"><span class="keyword">int</span> q[sizeque] , head , tail ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> ((x%sizeque)+sizeque)%sizeque ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; head = <span class="number">0</span> , tail = -<span class="number">1</span> ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> q[F(head)] ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> q[F(tail)] ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_front</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; q[F(--head)] = x ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; q[F(++tail)] = x ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123; head ++ ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123; tail -- ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> head &gt; tail ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start , <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cont , <span class="number">0</span> , <span class="keyword">sizeof</span> cont) ;</span><br><span class="line">    <span class="built_in">memset</span>(dis , <span class="number">0x7f</span> , <span class="keyword">sizeof</span> dis) ; clear() ;</span><br><span class="line">    <span class="keyword">for</span> (u = <span class="number">1</span> ; u &lt;= cont_time[<span class="number">0</span>][<span class="number">0</span>] ; u ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cont_time[u][<span class="number">1</span>]&gt;end || cont_time[u][<span class="number">2</span>]&lt;start) <span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">else</span> cont[cont_time[u][<span class="number">0</span>]] = <span class="keyword">true</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_back(<span class="number">1</span>) ; inq[<span class="number">1</span>] = <span class="keyword">true</span> ; dis[<span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> (!empty()) &#123;</span><br><span class="line">        u = front() , pop_front() ; inq[u] = <span class="keyword">false</span> ;</span><br><span class="line">        <span class="keyword">for</span> (v = <span class="number">1</span> ; v &lt;= m ; v ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[u][v]==info || cont[v]) <span class="keyword">continue</span> ;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u]+<span class="built_in">map</span>[u][v]) &#123;</span><br><span class="line">                dis[v] = dis[u]+<span class="built_in">map</span>[u][v] ;</span><br><span class="line">                <span class="keyword">if</span> (!inq[v]) &#123;</span><br><span class="line">                    inq[v] = <span class="keyword">true</span> ;</span><br><span class="line">                    <span class="keyword">if</span> (!empty() &amp;&amp; dis[v]&lt;dis[front()]) push_front(v) ;</span><br><span class="line">                    <span class="function"><span class="keyword">else</span> <span class="title">push_back</span><span class="params">(v)</span> </span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dis[m] == info) length[start][end] = -<span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">else</span> length[start][end] = dis[m] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">ll tmp ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//  #define READ</span></span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        freopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">        freopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    read(n) , read(m) , read(K) , read(i) ;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">map</span> , <span class="number">0x7f</span> , <span class="keyword">sizeof</span> <span class="built_in">map</span>) ;</span><br><span class="line">    <span class="keyword">while</span> (i -- ) &#123;</span><br><span class="line">        read(u) , read(v) , read(tmp) ;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[u][v] &gt; tmp) &#123; <span class="built_in">map</span>[u][v] = <span class="built_in">map</span>[v][u] = tmp ; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    read(cont_time[<span class="number">0</span>][<span class="number">0</span>]) ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= cont_time[<span class="number">0</span>][<span class="number">0</span>] ; i ++ ) &#123;</span><br><span class="line">        read(cont_time[i][<span class="number">0</span>]) , read(cont_time[i][<span class="number">1</span>]) , read(cont_time[i][<span class="number">2</span>]) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (j = i ; j &lt;= n ; j ++ )</span><br><span class="line">            SPFA(i , j) ;</span><br><span class="line">    <span class="built_in">memset</span>(f , <span class="number">0x7f</span> , <span class="keyword">sizeof</span> f) ;</span><br><span class="line">    f[<span class="number">0</span>] = -K ;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span> ; j &lt; i ; j ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[j]==info || length[j+<span class="number">1</span>][i]&lt;<span class="number">0</span>) <span class="keyword">continue</span> ;</span><br><span class="line">            tmp = f[j]+(ll)K+(ll)length[j+<span class="number">1</span>][i]*(ll)(i-j) ;</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; f[i]) f[i] = tmp ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n] ) ;</span><br><span class="line">    <span class="preprocessor">#ifdef  READ</span></span><br><span class="line">        fclose(stdin) ; fclose(stdout) ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">        getchar() ; getchar() ;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1001: [BeiJing2006]狼抓兔子]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1001/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p><img src="http://www.lydsy.com/JudgeOnline/images/1001.jpg" alt=""><br>求start与end间的最小割</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><ol>
<li>本题用写的较好的网络流最大流可以直接水过</li>
<li>这是一个平面图,<strong>平面图最大流=对偶图最短路</strong><br>对平面图的更详细介绍,请见周冬的论文<a href="http://wenku.baidu.com/view/5a7df375a417866fb84a8e54.html" target="_blank" rel="external">《浅析最大最小定理在信息学竞赛中的应用》</a></li>
</ol>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  2000005LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxe  6000005LL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> FST &#123; <span class="keyword">int</span> to , next , w ; &#125; e[maxe] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> star[maxn] = &#123;<span class="number">0</span>&#125; , tote = <span class="number">0</span> ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">truee[++tote].to = v ; e[tote].w = w ; e[tote].next = star[u] ; star[u] = tote ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , N , M , S , T ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x-<span class="number">1</span>)*M+y ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">block_up</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> hash(x,y)*<span class="number">2</span>-(x-<span class="number">1</span>)*<span class="number">2</span> ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">block_down</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> hash(x,y)*<span class="number">2</span>-(x-<span class="number">1</span>)*<span class="number">2</span>-<span class="number">1</span> ; &#125;</span><br><span class="line"><span class="comment">/* 返回以(x,y)为左上点的上下三角区域标号 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i , j , k , u , v ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">trueread(N) , read(M) ;</span><br><span class="line">truen = (N-<span class="number">1</span>)*(M-<span class="number">1</span>)*<span class="number">2</span> ; S = ++n ; T = ++n ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= N ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt; M ; j ++ ) &#123;</span><br><span class="line">truetruetrueread(k) ;</span><br><span class="line">truetruetrueu = i&gt;<span class="number">1</span> ? block_down(i-<span class="number">1</span>,j) : T ;</span><br><span class="line">truetruetruev = i&lt;N ? block_up(i,j) : S ;</span><br><span class="line">truetruetrueAddEdge(u , v , k) , AddEdge(v , u , k) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; N ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= M ; j ++ ) &#123;</span><br><span class="line">truetruetrueread(k) ;</span><br><span class="line">truetruetrueu = j&gt;<span class="number">1</span> ? block_up(i,j-<span class="number">1</span>) : S ;</span><br><span class="line">truetruetruev = j&lt;M ? block_down(i,j) : T ;</span><br><span class="line">truetruetrueAddEdge(u , v , k) , AddEdge(v , u , k) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; N ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt; M ; j ++ ) &#123;</span><br><span class="line">truetruetrueread(k) ;</span><br><span class="line">truetruetrueu = block_up(i,j) ;</span><br><span class="line">truetruetruev = block_down(i,j) ;</span><br><span class="line">truetruetrueAddEdge(u , v , k) , AddEdge(v , u , k) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sizeque  2000000LL</span></span><br><span class="line"><span class="keyword">int</span> q[sizeque] , head , tail ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> ((x%sizeque)+sizeque)%sizeque ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; head = <span class="number">0</span> , tail = -<span class="number">1</span> ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> q[F(head)] ; &#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> q[F(tail)] ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_front</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; q[F(--head)] = x ; &#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; q[F(++tail)] = x ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123; head ++ ;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123; tail -- ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> head &gt; tail ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn] ;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn] = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> s , t , p ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">true<span class="built_in">memset</span>(dis , <span class="number">0x7f</span> , <span class="keyword">sizeof</span> dis) ; clear() ;</span><br><span class="line">truepush_back(S) , inq[S] = <span class="keyword">true</span> ; dis[S] = <span class="number">0</span> ;</span><br><span class="line">true<span class="keyword">while</span> (!empty()) &#123;</span><br><span class="line">truetrues = front() , pop_front() ; inq[s] = <span class="keyword">false</span> ;</span><br><span class="line">truetrue<span class="keyword">for</span> (p = star[s] ; p ; p = e[p].next) &#123;</span><br><span class="line">truetruetruet = e[p].to ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (dis[t] &gt; dis[s]+e[p].w) &#123;</span><br><span class="line">truetruetruetruedis[t] = dis[s]+e[p].w ;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (!inq[t]) &#123;</span><br><span class="line">truetruetruetruetrueinq[t] = <span class="keyword">true</span> ;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (!empty() &amp;&amp; dis[t]&lt;dis[front()]) push_front(t) ;</span><br><span class="line">truetruetruetruetrue<span class="function"><span class="keyword">else</span> <span class="title">push_back</span><span class="params">(t)</span> </span>;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[T] ) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1001.in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">"bzoj_1001.out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueBuild() ;</span><br><span class="line">trueSPFA() ;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[poj] 2154: Color]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/poj2154/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>用n种颜色对n个珠子构成的环上色, 旋转后相同的只算一种, 求本质不同的着色方案数</p>
<a id="more"></a>
<p><a href="http://poj.org/problem?id=2154" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>由 $burnside$ 定理可知, 有n个置换, 每个置换使得着色不变的着色方案个数有 $gcd(n,i)$ 个<br>由于$n\le 10^9$那么不能直接枚举, 那么</p>
<p>$$<br>\begin{aligned}<br>ans&amp;=\frac{1}{n}\cdot \sum_{i=1}^{n}n^{gcd(n,i)}\\<br>&amp;=\frac{1}{n}\cdot \sum_{d|n}\cdot n^{d}\cdot\sum_{i=1}^{n} \varepsilon(gcd(n,i)=d)\\<br>&amp;=\frac{1}{n}\cdot \sum_{d|n}\cdot n^{d}\cdot\sum_{i=1}^{\frac{n}{d}} \varepsilon(gcd(\frac{n}{d},i)=1)\\<br>&amp;=\frac{1}{n}\cdot\sum_{d|n}\cdot n^{d}\cdot\varphi(\frac{n}{d})\\<br>&amp;=\sum_{d|n}\cdot n^{d-1}\cdot\varphi(\frac{n}{d})<br>\end{aligned}<br>$$</p>
<p>此时不能直接用筛法求出欧拉函数值并存下来, 所以需要在线求欧拉函数</p>
<p>已知</p>
<p>$$n=\sum_{d|n}\varphi(d)$$</p>
<p>由莫比乌斯进行反演得</p>
<p>$$\varphi(n)=\sum_{d|n} \mu(d) \cdot (\frac{n}{d})$$</p>
<p>又因为$\mu(n)$的定义</p>
<p>$$\mu(n) =<br>\begin{cases}<br>1,  &amp; \text{$n$ = 1} \\<br>(-1)^k, &amp; \text{$n$无平方因子}  \\<br>0, &amp; \text{其它}<br>\end{cases}<br>$$</p>
<p>所以求$\varphi(n)$时,并不需要那些有平方因子的$d$</p>
<p>由唯一分解定理得<br>$$n=a_1^{p_1}\cdot a_2^{p_2}\cdot a_3^{p_3}\cdots a_k^{p_k}$$<br>其中的$a_i$为质数</p>
<p>那么我们只需要枚举一下由几个$a_i$相乘得到的$d$再加上一个$d=1$的情况即可</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ansmod ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">POW</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> ret = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> (x%=ansmod ; p ; p&gt;&gt;=<span class="number">1</span> , x*=x , x%=ansmod)</span><br><span class="line">truetrue<span class="keyword">if</span> (p&amp;<span class="number">1</span>) ret*=x , ret%=ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  sqr(x)  ((x)*(x))</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  32000LL</span></span><br><span class="line"></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> prime ;<span class="comment">/* 素数 */</span></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> factor ;<span class="comment">/* 约数 */</span></span><br><span class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span> pfactor ;<span class="comment">/* 质因数 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> cps[maxn] = &#123;<span class="number">0</span>&#125; ;<span class="comment">/* 合数 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span> </span>&#123;<span class="comment">/* 得到所有质数 */</span></span><br><span class="line"><span class="keyword">int</span> i , j ;</span><br><span class="line">trueprime.clear() ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; <span class="number">200</span> ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (!cps[i]) <span class="keyword">for</span> (j = i&lt;&lt;<span class="number">1</span> ; j &lt; maxn ; j += i)</span><br><span class="line">truetruetruecps[j] = <span class="keyword">true</span> ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt; maxn ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (!cps[i]) prime.push_back(i) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFactor</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* 得到x的所有约数 */</span></span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">truefactor.clear() ;</span><br><span class="line">truetmp = <span class="built_in">sqrt</span>(x) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= tmp ; i ++ ) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (x%i == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruefactor.push_back(i) ;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (i!=(x/i)) factor.push_back(x/i) ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decps</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* 将x质因数分解 */</span></span><br><span class="line"><span class="keyword">int</span> i , tmp ;</span><br><span class="line">truepfactor.clear() ;</span><br><span class="line">truetmp = <span class="built_in">sqrt</span>(x) ;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span> ; prime[i] &lt;= tmp ; i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (x%prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruepfactor.push_back(prime[i]) ;</span><br><span class="line">truetruetrue<span class="keyword">while</span> (x%prime[i] == <span class="number">0</span>) x /= prime[i] ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true<span class="keyword">if</span> (x &gt; <span class="number">1</span>) pfactor.push_back(x) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CalcD</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span>&amp; mu)</span> </span>&#123;<span class="comment">/* 计算出由s表示的某一个不含平方因子的数,并求得\mu值 */</span></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span> , i ;</span><br><span class="line">true<span class="keyword">for</span> (i = mu = <span class="number">0</span> ; s ; s&gt;&gt;=<span class="number">1</span> , i ++ )</span><br><span class="line">truetrue<span class="keyword">if</span> (s&amp;<span class="number">1</span>) ret *= pfactor[i] , mu ++ ;</span><br><span class="line">truemu = (mu&amp;<span class="number">1</span>) ? -<span class="number">1</span> : <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s , k , d , mu , ret = <span class="number">0</span> ;</span><br><span class="line">trueDecps(x) ;</span><br><span class="line">truek = pfactor.size() ;</span><br><span class="line">true<span class="keyword">for</span> (s = <span class="number">1</span> ; s &lt; (<span class="number">1</span>&lt;&lt;k) ; s ++ ) &#123;</span><br><span class="line">truetrued = CalcD(s , mu) ;</span><br><span class="line">truetrueret += x/d*mu ;</span><br><span class="line">true&#125;</span><br><span class="line">trueret = (x+ret)%ansmod ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time , n , i , ans ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueGetPrime() ;</span><br><span class="line">true<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Time) ;</span><br><span class="line">true<span class="keyword">while</span> (Time--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">truetrue<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n , &amp;ansmod) ;</span><br><span class="line">truetrueGetFactor(n) ;</span><br><span class="line">truetrueans = <span class="number">0</span> ;</span><br><span class="line">truetrue<span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; factor.size() ; i ++ ) &#123;</span><br><span class="line">truetruetrueans += POW(n,factor[i]-<span class="number">1</span>)*Euler(n/factor[i]) ;</span><br><span class="line">truetruetrueans %= ansmod ;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[poj] 2409: Let it Bead]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/poj2409/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>用k种颜色对n个珠子构成的环上色, 旋转翻转后相同的只算一种, 求本质不同的着色方案数</p>
<a id="more"></a>
<p><a href="http://poj.org/problem?id=2409" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>对于翻转使用 $burnside$ 定理</p>
<blockquote>
<p>当$n$为奇数时有一种情形</p>
<blockquote>
<p>$n$个翻转都为以某一顶点和它所对的边的中点为轴翻转的,着色方案数为$$k^{n/2+1}\cdot n$$种</p>
</blockquote>
<p>当$n$为偶数时有两种情形</p>
<blockquote>
<p>有$n/2$个翻转是以对顶点为轴旋转的,共$$k^{n/2+1}\cdot n/2$$种</p>
</blockquote>
<p>　</p>
<blockquote>
<p>另外$n/2$个翻转是以对边中点为轴旋转的,共$$k^{n/2}\cdot n/2$$种</p>
</blockquote>
</blockquote>
<p>对于旋转使用 $burnside$ 定理计算的优化 $polya$ 计数公式<br>即</p>
<p>$$\sum_{i=1}^{n}k^{gcd(n,i)}$$</p>
<p>最后再除以置换群的大小$n\cdot2$</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">POW</span><span class="params">(ll x , ll p)</span> </span>&#123;</span><br><span class="line">truell ret = <span class="number">1</span> ;</span><br><span class="line">true<span class="keyword">for</span> ( ; p ; p&gt;&gt;=<span class="number">1</span> , x *= x) <span class="keyword">if</span> (p&amp;<span class="number">1</span>) ret *= x ;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> y ? GCD(y , x%y) : x ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n , k , i ;</span><br><span class="line">ll ans ;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k , &amp;n)&amp;&amp;n&amp;&amp;k) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (n&amp;<span class="number">1</span>) ans = POW(k , n/<span class="number">2</span>+<span class="number">1</span>)*n ;</span><br><span class="line">truetrue<span class="keyword">else</span> ans = POW(k , n/<span class="number">2</span>+<span class="number">1</span>)*(n/<span class="number">2</span>)+POW(k,n/<span class="number">2</span>)*(n/<span class="number">2</span>) ;</span><br><span class="line">truetrue<span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">truetruetrueans += POW(k , GCD(n , i)) ;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans/(<span class="number">2</span>*n)) ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[bzoj] 1012: [JSOI2008]最大数maxnumber]]></title>
      <url>http://zhangtianxiang.github.io/2015/01/01/bzoj1012/</url>
      <content type="html"><![CDATA[<h2 id="题意">题意</h2><p>　　树状数组维护区间最值</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1012" target="_blank" rel="external">传送门</a></p>
<h2 id="分析">分析</h2><p>　　可以好好画画图</p>
<h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CH , NEG ;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="keyword">true</span> , CH = getchar() ;</span><br><span class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span>&amp; ret)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</span><br><span class="line">true<span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  lb(x) (x&amp;(-x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  maxn  200010LL</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  max(x,y) ((x)&gt;(y)?(x):(y))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m , LAST = <span class="number">0</span> , ansmod ;</span><br><span class="line"><span class="keyword">int</span> A[maxn] , C[maxn] = &#123;<span class="number">0</span>&#125; , tot = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">QueryMax</span><span class="params">(<span class="keyword">int</span> L , <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> ret = A[R] ;</span><br><span class="line">true<span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (A[R] &gt; ret) ret = A[R] ;</span><br><span class="line">truetrue<span class="keyword">for</span> ( -- R ; R-L &gt;= lb(R) ; R -= lb(R))</span><br><span class="line">truetruetrue<span class="keyword">if</span> (C[R] &gt; ret) ret = C[R] ;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">trueA[++tot] = (LAST+x)%ansmod ;</span><br><span class="line">trueC[tot] = max(QueryMax(tot-lb(tot)+<span class="number">1</span> , tot-<span class="number">1</span>) , A[tot]) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cmd , x ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	#define READ</span></span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefreopen(<span class="string">".in"</span> ,<span class="string">"r"</span>,stdin ) ;</span><br><span class="line">truetruefreopen(<span class="string">".out"</span>,<span class="string">"w"</span>,stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">trueread(m) , read(ansmod) ;</span><br><span class="line">true<span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">truetruereads(cmd) , read(x) ;</span><br><span class="line">truetrue<span class="keyword">if</span> (cmd == <span class="string">'A'</span>) Insert(x) ;</span><br><span class="line">truetrue<span class="function"><span class="keyword">else</span> <span class="title">printf</span><span class="params">("%d\n", LAST=QueryMax(tot-x+1 , tot)</span>) </span>;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="preprocessor">#ifdef  READ</span></span><br><span class="line">truetruefclose(stdin) ; fclose(stdout) ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">truetruegetchar() ; getchar() ;</span><br><span class="line">true<span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在github上开始新的记录]]></title>
      <url>http://zhangtianxiang.github.io/2014/12/31/%E5%9C%A8github%E4%B8%8A%E5%BC%80%E5%A7%8B%E6%96%B0%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>感觉静态博客好强大…<br>同时感谢jsx同学不舍昼夜地鼓弄hexo才顺带有了我这个十分心仪的博客O(∩_∩)O~<br>于是舍弃了原来的is-programmer</p>
<p>新的一年新的征途<br>希望能够在新的一年里取得辉煌!</p>
]]></content>
    </entry>
    
  
  
</search>
